labeller = label_bquote(rows = observations: .(as.character(input_cop))))
p1 <- p1 + scale_x_continuous(breaks=seq(0,1,0.1))
p1 <- p1 + theme_bw()
p1 <- p1 + xlab(bquote(tau[input])) + ylab(bquote(tau[output]))
if (fitCopula == "claytonTau") {
copula <- "Clayton"
} else if (fitCopula == "frankTau") {
copula <- "Frank"
} else if (fitCopula == "gumbelTau") {
copula <- "Gumbel"
} else {
stop("No copula")
}
p1 <- p1 + ggtitle(bquote("Input versus fitted " ~ tau ~ " for " ~ .(copula) ~ " fitting")) +
theme(plot.title = element_text(hjust = 0.5))
return(p1)
}
plotTau("frankTau")
plotTau <- function(fitCopula) {
p1 <- ggplot(dfplot, aes_string(x="tau", y=fitCopula))
for (i in 1:length(tauValues)) {
p1 <- p1 +geom_boxplot(data=subset(dfplot, tau == tauValues[i]), width=0.5/length(tauValues))
}
p1 <- p1 + geom_abline(intercept = 0, slope = 1, color="grey",
linetype="dashed", size=0.5)
p1 <- p1 + facet_grid(rows = vars(input_cop),
labeller = label_bquote(rows = observations: .(as.character(input_cop))))
p1 <- p1 + scale_x_continuous(breaks=seq(0,1,0.1))
p1 <- p1 + theme_bw()
p1 <- p1 + xlab(bquote(tau[input])) + ylab(bquote(tau[output]))
if (fitCopula == "claytonTau") {
copula <- "Clayton"
} else if (fitCopula == "frankTau") {
copula <- "Frank"
} else if (fitCopula == "gumbelTau") {
copula <- "Gumbel"
} else {
stop("No copula")
}
p1 <- p1 + ggtitle(bquote("Input versus fitted" ~ tau ~ "for" ~ .(copula) ~ " fitting")) +
theme(plot.title = element_text(hjust = 0.5))
return(p1)
}
plotTau("frankTau")
plot_folder <- paste0("../Data/Plots/Arch_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,"/")
dir.create(file.path(plot_folder), showWarnings = FALSE)
plotWidth <- 9
plotHeight <- 6
res <- 400
for (fitCopula in c("claytonTau", "frankTau", "gumbelTau")){
fileName <- paste0("Arch_",fitCopula,"_setting_", setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png")
p1 <- plotTau(fitCopula)
ggsave(
paste0(plot_folder, fileName),
p1,
width = plotWidth,
height = plotHeight,
dpi = res
)
}
plotTau <- function(fitCopula) {
p1 <- ggplot(dfplot, aes_string(x="tau", y=fitCopula))
for (i in 1:length(tauValues)) {
p1 <- p1 +geom_boxplot(data=subset(dfplot, tau == tauValues[i]), width=0.5/length(tauValues))
}
p1 <- p1 + geom_abline(intercept = 0, slope = 1, color="grey",
linetype="dashed", size=0.5)
p1 <- p1 + facet_grid(rows = vars(input_cop),
labeller = label_bquote(rows = observations: .(as.character(input_cop))))
p1 <- p1 + scale_x_continuous(breaks=seq(0,1,0.1)) + scale_y_continuous(breaks=seq(0,1,0.1))
p1 <- p1 + theme_bw()
p1 <- p1 + xlab(bquote(tau[input])) + ylab(bquote(tau[output]))
if (fitCopula == "claytonTau") {
copula <- "Clayton"
} else if (fitCopula == "frankTau") {
copula <- "Frank"
} else if (fitCopula == "gumbelTau") {
copula <- "Gumbel"
} else {
stop("No copula")
}
p1 <- p1 + ggtitle(bquote("Input versus fitted" ~ tau ~ "for" ~ .(copula) ~ " fitting")) +
theme(plot.title = element_text(hjust = 0.5))
return(p1)
}
plot_folder <- paste0("../Data/Plots/Arch_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,"/")
dir.create(file.path(plot_folder), showWarnings = FALSE)
plotWidth <- 9
plotHeight <- 6
res <- 400
for (fitCopula in c("claytonTau", "frankTau", "gumbelTau")){
fileName <- paste0("Arch_",fitCopula,"_setting_", setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png")
p1 <- plotTau(fitCopula)
ggsave(
paste0(plot_folder, fileName),
p1,
width = plotWidth,
height = plotHeight,
dpi = res
)
}
plotTau <- function(fitCopula) {
p1 <- ggplot(dfplot, aes_string(x="tau", y=fitCopula))
for (i in 1:length(tauValues)) {
p1 <- p1 +geom_boxplot(data=subset(dfplot, tau == tauValues[i]), width=0.5/length(tauValues))
}
p1 <- p1 + geom_abline(intercept = 0, slope = 1, color="grey",
linetype="dashed", size=0.5)
p1 <- p1 + facet_grid(rows = vars(input_cop),
labeller = label_bquote(rows = observations: .(as.character(input_cop))))
p1 <- p1 + scale_x_continuous(breaks=seq(0,1,0.1)) + scale_y_continuous(breaks=seq(0,1,0.2))
p1 <- p1 + theme_bw()
p1 <- p1 + xlab(bquote(tau[input])) + ylab(bquote(tau[output]))
if (fitCopula == "claytonTau") {
copula <- "Clayton"
} else if (fitCopula == "frankTau") {
copula <- "Frank"
} else if (fitCopula == "gumbelTau") {
copula <- "Gumbel"
} else {
stop("No copula")
}
p1 <- p1 + ggtitle(bquote("Input versus fitted" ~ tau ~ "for" ~ .(copula) ~ " fitting")) +
theme(plot.title = element_text(hjust = 0.5))
return(p1)
}
plot_folder <- paste0("../Data/Plots/Arch_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,"/")
dir.create(file.path(plot_folder), showWarnings = FALSE)
plotWidth <- 9
plotHeight <- 6
res <- 400
for (fitCopula in c("claytonTau", "frankTau", "gumbelTau")){
fileName <- paste0("Arch_",fitCopula,"_setting_", setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png")
p1 <- plotTau(fitCopula)
ggsave(
paste0(plot_folder, fileName),
p1,
width = plotWidth,
height = plotHeight,
dpi = res
)
}
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ParamFitting.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ParamFitting.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ParamFitting.R")
rm(list=ls())
library(scoringRules)
library(MASS)
# "source" directory
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code")
dir <- "./sourceArchimedean/"
source(paste0(dir, "generate_observations_arch.R"))
source(paste0(dir, "generate_ensfc_arch.R"))
source(paste0(dir, "postprocess_ensfc_arch.R"))
source(paste0(dir, "mvpp_arch.R"))
source(paste0(dir, "evaluation_functions_arch.R"))
source(paste0(dir, "CopulaParameter.R"))
source(paste0(dir, "../Settings.R"))
# Setting parameter for different runs
setting <- 1
modelSetting <- 2
source(paste0(dir, "../../Settings.R"))
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/Settings.R")
rm(list=ls())
library(scoringRules)
library(MASS)
# "source" directory
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code")
dir <- "./sourceArchimedean/"
source(paste0(dir, "generate_observations_arch.R"))
source(paste0(dir, "generate_ensfc_arch.R"))
source(paste0(dir, "postprocess_ensfc_arch.R"))
source(paste0(dir, "mvpp_arch.R"))
source(paste0(dir, "evaluation_functions_arch.R"))
source(paste0(dir, "CopulaParameter.R"))
source(paste0(dir, "../../Settings.R"))
# Setting parameter for different runs with same parameters
setting <- 1
getModelSettings(modelSetting = 2)
modelSetting <- 2
getModelSettings(modelSetting)
getModelSettings(2)
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/Settings.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/Settings.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/Settings.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
rm(list=ls())
library(scoringRules)
library(MASS)
# "source" directory
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code")
dir <- "./sourceArchimedean/"
source(paste0(dir, "generate_observations_arch.R"))
source(paste0(dir, "generate_ensfc_arch.R"))
source(paste0(dir, "postprocess_ensfc_arch.R"))
source(paste0(dir, "mvpp_arch.R"))
source(paste0(dir, "evaluation_functions_arch.R"))
source(paste0(dir, "CopulaParameter.R"))
source(paste0(dir, "../../Settings.R"))
# Setting parameter for different runs with same parameters
setting <- 1
getModelSettings(modelSetting = 2)
rm(list=ls())
library(ggplot2)
library(gridExtra)
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures")
source("../../Settings.R")
getModelSettings(modelSetting = 2)
load(paste0("../Data/TestStatistic/TestStatistic_Archimedean","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".Rdata"))
df <- dfmc; rm(dfmc)
df1 <- subset(df)
rm(list=ls())
library(ggplot2)
library(gridExtra)
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures")
source("../Settings.R")
getModelSettings(modelSetting = 2)
load(paste0("../Data/TestStatistic/TestStatistic_Archimedean","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".Rdata"))
df <- dfmc; rm(dfmc)
df1 <- subset(df)
df1$value <- (-1)*df1$value
df0 <- df1
rm(list=ls())
library(ggplot2)
library(gridExtra)
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures")
source("../Settings.R")
getModelSettings(modelSetting = 2)
setting <- 1
load(paste0("../Data/TestStatistic/TestStatistic_Archimedean","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".Rdata"))
df <- dfmc; rm(dfmc)
df1 <- subset(df)
# code to compute test statistics of DM tests
# results are saved in a specific data frame format to simplify plotting later on
rm(list=ls())
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output")
source( "../Settings.R")
# Setting parameter for different runs
setting <- 1
getModelSettings(modelSetting = 2)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/TimeBoxplots.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/TimeBoxplots.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/TimeBoxplots.R")
load("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/Data/TestStatistic/TestStatistic_Archimedean_setting_1_obsmodel_2_fcmodel_2.Rdata")
View(dfmc)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
this_score <- "vs0_list"
dfplot <- subset(df2, score == this_score)
if (observationsModel == 1) {
plotWidth <- 9
plotHeight <- 6 * max(dfplot$repetition)
dfplot$equalThetas <- (dfplot$theta0 == dfplot$theta)
# Get the plots
p1saveFrank <- plotScores(dfplot, "Frank", this_score)
p1saveClayton <- plotScores(dfplot, "Clayton", this_score)
p1saveGumbel <- plotScores(dfplot, "Gumbel", this_score)
# Save the plots individually
saveFigure(paste0("Arch_VS_Clayton","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png"),p1saveClayton)
saveFigure(paste0("Arch_VS_Frank","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png"),p1saveFrank)
saveFigure(paste0("Arch_VS_Gumbel","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png"),p1saveGumbel)
print("Finished individual plots VS")
} else if (observationsModel == 2) {
# plotWidth <- 9
# plotHeight <- 6 * max(dfplot$repetition)
#
# p1saveFrank <- plotScoresTau(dfplot, "Frank", this_score, FALSE)
# p1saveClayton <- plotScoresTau(dfplot, "Clayton", this_score, FALSE)
# p1saveGumbel <- plotScoresTau(dfplot, "Gumbel", this_score,FALSE)
#
# # Save the plots individually
# saveFigure(paste0("Arch_VS_Separated_Clayton","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png"),p1saveClayton)
# saveFigure(paste0("Arch_VS_Separated_Frank","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png"),p1saveFrank)
# saveFigure(paste0("Arch_VS_Separated_Gumbel","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png"),p1saveGumbel)
#
# print("Finished VS Separated")
plotWidth <- 9
plotHeight <- 6
p1saveFrank <- plotScoresTau(dfplot, "Frank", this_score, TRUE)
p1saveClayton <- plotScoresTau(dfplot, "Clayton", this_score, TRUE)
p1saveGumbel <- plotScoresTau(dfplot, "Gumbel", this_score,TRUE)
if (this_score == "vs0_list") {
text <- "_weight_0_p_05_"
}
# Save the plots individually
saveFigure(paste0("Arch_VS", text, "Together_Clayton","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png"),p1saveClayton)
saveFigure(paste0("Arch_VS", text, "Together_Frank","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png"),p1saveFrank)
saveFigure(paste0("Arch_VS", text, "Together_Gumbel","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png"),p1saveGumbel)
print("Finished VS Together")
}
if (observationsModel == 1) {
### Join the plots
plotWidth <- 9
plotHeight <- 25 * max(dfplot$repetition)
saveFigure(paste0("Arch_VS_Combined","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png"), grid.arrange(p1saveClayton,p1saveFrank,p1saveGumbel, ncol = 1))
print("Finished combined plots VS")
}
?list
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ArchimedeanPlots.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ArchimedeanPlots.R")
View(dfplot)
require(MASS)
require(copula)
require(ggplot2)
require(FactorCopula)
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures")
tau <- 0.5
d <- 2
dfplot <- data.frame(matrix(ncols=2, nrows=0))
names(dfplot) <- c("copula", "value")
cops <- c("Frank", "Gumbel", "Clayton")
n <- 100
for (copula in cops) {
# Generate observations
if (copula == "Frank"){
# -infty < theta0 < infty and theta0 != 0
param <- tau2par("frk", tau)
cop <- frankCopula(param = param, dim = d)
} else if (copula == "Gumbel") {
# 1 <= theta0 < infty
param <- tau2par("gum", tau)
cop <- gumbelCopula(param = param, dim = d)
} else if (copula == "Clayton") {
# -1 <= theta0 < infty and theta0 != 0
param <- 2 * tau / (1-tau)
cop <- claytonCopula(param = param, dim = d)
} else {
stop(paste("Incorrect value for 'copula' input"))
}
paramMargins <- list()
for (i in 1:d){
paramMargins[[i]] <- list(mean = 0, sd = 1)
}
# Generate observations with standard normal marginals
mvDistribution <- mvdc(copula=cop, margins=rep("norm", d),
paramMargins=paramMargins)
# Random sample from the mvdc
obs <- rMvdc(n, mvDistribution)
new_df <- data.frame("copula" = copula, "value" = obs)
dfplot <- rbind(dfplot, new_df)
}
require(MASS)
require(copula)
require(ggplot2)
require(FactorCopula)
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures")
tau <- 0.5
d <- 2
dfplot <- data.frame(matrix(ncol=2, nrow=0))
names(dfplot) <- c("copula", "value")
cops <- c("Frank", "Gumbel", "Clayton")
n <- 100
for (copula in cops) {
# Generate observations
if (copula == "Frank"){
# -infty < theta0 < infty and theta0 != 0
param <- tau2par("frk", tau)
cop <- frankCopula(param = param, dim = d)
} else if (copula == "Gumbel") {
# 1 <= theta0 < infty
param <- tau2par("gum", tau)
cop <- gumbelCopula(param = param, dim = d)
} else if (copula == "Clayton") {
# -1 <= theta0 < infty and theta0 != 0
param <- 2 * tau / (1-tau)
cop <- claytonCopula(param = param, dim = d)
} else {
stop(paste("Incorrect value for 'copula' input"))
}
paramMargins <- list()
for (i in 1:d){
paramMargins[[i]] <- list(mean = 0, sd = 1)
}
# Generate observations with standard normal marginals
mvDistribution <- mvdc(copula=cop, margins=rep("norm", d),
paramMargins=paramMargins)
# Random sample from the mvdc
obs <- rMvdc(n, mvDistribution)
new_df <- data.frame("copula" = copula, "value" = obs)
dfplot <- rbind(dfplot, new_df)
}
View(dfplot)
View(new_df)
require(MASS)
require(copula)
require(ggplot2)
require(FactorCopula)
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures")
tau <- 0.5
d <- 2
dfplot <- data.frame(matrix(ncol=3, nrow=0))
names(dfplot) <- c("copula", "xvalue", "yvalue")
cops <- c("Frank", "Gumbel", "Clayton")
n <- 100
for (copula in cops) {
# Generate observations
if (copula == "Frank"){
# -infty < theta0 < infty and theta0 != 0
param <- tau2par("frk", tau)
cop <- frankCopula(param = param, dim = d)
} else if (copula == "Gumbel") {
# 1 <= theta0 < infty
param <- tau2par("gum", tau)
cop <- gumbelCopula(param = param, dim = d)
} else if (copula == "Clayton") {
# -1 <= theta0 < infty and theta0 != 0
param <- 2 * tau / (1-tau)
cop <- claytonCopula(param = param, dim = d)
} else {
stop(paste("Incorrect value for 'copula' input"))
}
paramMargins <- list()
for (i in 1:d){
paramMargins[[i]] <- list(mean = 0, sd = 1)
}
# Generate observations with standard normal marginals
mvDistribution <- mvdc(copula=cop, margins=rep("norm", d),
paramMargins=paramMargins)
# Random sample from the mvdc
obs <- rMvdc(n, mvDistribution)
new_df <- data.frame("copula" = copula, "xvalue" = obs[1,], "yvalue" = obs[2,])
dfplot <- rbind(dfplot, new_df)
}
View(dfplot)
require(MASS)
require(copula)
require(ggplot2)
require(FactorCopula)
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures")
tau <- 0.5
d <- 2
dfplot <- data.frame(matrix(ncol=3, nrow=0))
names(dfplot) <- c("copula", "xvalue", "yvalue")
cops <- c("Frank", "Gumbel", "Clayton")
n <- 100
for (copula in cops) {
# Generate observations
if (copula == "Frank"){
# -infty < theta0 < infty and theta0 != 0
param <- tau2par("frk", tau)
cop <- frankCopula(param = param, dim = d)
} else if (copula == "Gumbel") {
# 1 <= theta0 < infty
param <- tau2par("gum", tau)
cop <- gumbelCopula(param = param, dim = d)
} else if (copula == "Clayton") {
# -1 <= theta0 < infty and theta0 != 0
param <- 2 * tau / (1-tau)
cop <- claytonCopula(param = param, dim = d)
} else {
stop(paste("Incorrect value for 'copula' input"))
}
paramMargins <- list()
for (i in 1:d){
paramMargins[[i]] <- list(mean = 0, sd = 1)
}
# Generate observations with standard normal marginals
mvDistribution <- mvdc(copula=cop, margins=rep("norm", d),
paramMargins=paramMargins)
# Random sample from the mvdc
obs <- rMvdc(n, mvDistribution)
new_df <- data.frame("copula" = copula, "xvalue" = obs[,1], "yvalue" = obs[,2])
dfplot <- rbind(dfplot, new_df)
}
View(dfplot)
p1 <- ggplot(dfplot, aes(x=xvalue, y=yvalue)) + geom_point()
p1 <- p1 + facet_grid(rows = vars(copula),
labeller = label_bquote(rows = copula: .(as.character(copula))))
p1 <- p1 + scale_x_continuous(breaks=seq(0,1,0.1)) + scale_y_continuous(breaks=seq(0,1,0.2))
p1 <- p1 + theme_bw()
# p1 <- p1 + xlab(bquote(tau[input])) + ylab(bquote(tau[output]))
# p1 <- p1 + xlab(bquote(tau[input])) + ylab(bquote(tau[output]))
p1
p1 <- ggplot(dfplot, aes(x=xvalue, y=yvalue)) + geom_point()
p1 <- p1 + facet_grid(rows = vars(copula),
labeller = label_bquote(rows = copula: .(as.character(copula))))
p1 <- p1 + theme_bw()
# p1 <- p1 + xlab(bquote(tau[input])) + ylab(bquote(tau[output]))
p1
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ArchimedeanPlots.R")
p1
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ArchimedeanPlots.R")
p1
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ArchimedeanPlots.R")
p1
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ArchimedeanPlots.R")
p1
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ArchimedeanPlots.R")
p1
p1 <- ggplot(dfplot, aes(x=xvalue, y=yvalue)) + geom_point()
p1 <- p1 + facet_grid(rows = vars(copula),
labeller = label_bquote(rows = copula: .(as.character(copula))))
p1 <- p1 + theme_bw()
p1 <- p1 + xlab(bquote(x)) + ylab(bquote(y))
fileName <- paste0("../Data/Plots/ArchimedeanPlots.png")
plotWidth <- 9
plotHeight <- 6
res <- 400
ggsave(
paste0(plot_folder, fileName),
p1,
width = plotWidth,
height = plotHeight,
dpi = res
)
ggsave(
fileName,
p1,
width = plotWidth,
height = plotHeight,
dpi = res
)
