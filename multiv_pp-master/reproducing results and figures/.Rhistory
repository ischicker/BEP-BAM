# Dependence parameter between weather variables for observations
input_theta0 <- c(5, 10)
# Dependence parameter between weather variables for ensemble forecasts
input_theta <- c(5, 10)
# Copula type
input_copula <- c("Frank","Gumbel", "Clayton")
# Dimension of multi-index l (weather variable, position and look-ahead time)
input_d <- 3
# Repetitions
repetitions <- 10
# Put the parameters in a grid
input_par <- expand.grid(input_copula, input_d, 1:repetitions)
View(input_par)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
gc()
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output/DM_TestStatistic_computation_Archimedean - Copy.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output/DM_TestStatistic_computation_Archimedean - Copy.R")
save(dfmc, file = paste0("../Data/TestStatistic/TestStatistic_Archimedean","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".Rdata"))
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
load("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/Data/TestStatistic/TestStatistic_Archimedean_setting_1_obsmodel_2_fcmodel_2.Rdata")
View(dfmc)
load("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/Data/Rdata/Archimedean_setting_1_obsmodel_2_fcmodel_2_ID_23.Rdata")
View(res)
rm(list=ls())
library(ggplot2)
library(gridExtra)
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures")
# Model 1 : Standard Gaussian Marginals
observationsModel <- 2
forecastModel <- 2
setting <- 1
load(paste0("../Data/TestStatistic/TestStatistic_Archimedean","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".Rdata"))
df <- dfmc; rm(dfmc)
df1 <- subset(df)
input_theta0 <- c(5, 10)
input_theta <- c(5, 10)
input_copula <- c("Frank","Gumbel", "Clayton")
input_d <- 3
df1$value <- (-1)*df1$value
df0 <- df1
input_scores <- unique(df1$score)
plot_folder <- paste0("../Data/Plots/Arch","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,"/")
dir.create(file.path(plot_folder), showWarnings = FALSE)
# drop model == "ens"
df1_save <- df1
df1 <- subset(df1_save, model != "ens")
# also drop EMOS.Q
df2 <- subset(df1, model != "emos.q")
mypal <- colorspace::rainbow_hcl(8)
mypal_use <- c("decc.q" = mypal[1],
"ecc.q" = mypal[2],
"ecc.s" = mypal[3],
"gca" = mypal[4],
"ssh" = mypal[5],
"clayton" = mypal[6],
"frank" = mypal[7],
"gumbel" = mypal[8])
df2$model <- factor(df2$model, levels = c("decc.q", "ecc.q", "ecc.s", "gca", "ssh", "clayton", "frank", "gumbel"))
model_vec <- c("dECC", "ECC-Q", "ECC-S", "GCA", "SSh", "Clayton", "Frank", "Gumbel")
ylimitFunc <- function(val1, val2) {
return(1.5 * max(abs(val1), abs(val2)))
}
# Plot the scores for copula
plotScores <- function(dfplot, cop, this_score){
dfplotCop <- subset(dfplot, copula == cop)
alpha <- 0.25
quants <- unname(quantile(dfplot$value, c(0.01, 0.99)))
ylimits <- c(1.5 * min(quants[1], qnorm(alpha)), 1.5 * max(quants[2], qnorm(1 - alpha)))
p1 <- ggplot(dfplotCop, aes(model, value, colour = model))
p1 <- p1 + ylim(ylimits[1], ylimits[2])
p1 <- p1 + geom_rect(mapping=aes(xmin=-Inf, xmax=Inf, ymin=qnorm(alpha), ymax=qnorm(1-alpha)), fill = "gray75", color="gray75", alpha=alpha)
p1 <- p1 + geom_boxplot(outlier.shape = NA) + geom_hline(yintercept = 0, linetype = "dashed", color = "gray25")
p1 <- p1 + facet_grid(rows = vars(theta), cols = vars(theta0),
labeller = label_bquote(rows = theta==.(theta),
cols = theta[0]==.(theta0)))
scval <- strsplit(this_score, split = "_")[[1]][1]
if(scval == "es"){
title <- paste("Energy Score for",cop,"copula")
p1 <- p1 + ggtitle(title)
}
if(scval == "vs1"){
title <- paste("Variogram Score for",cop,"copula")
p1 <- p1 + ggtitle(title)
}
p1 <- p1 + theme_bw() + theme(legend.position = "bottom")
p1 <- p1 + xlab("Model") + ylab("DM test statistic")
p1 <- p1 + scale_color_manual(values = mypal_use, name = "Model", label = model_vec)
p1 <- p1 + scale_x_discrete(label = model_vec)
return(p1)
}
plotScoresTau <- function(dfplot, cop, this_score){
dfplotCop <- subset(dfplot, copula == cop)
alpha <- 0.25
quants <- unname(quantile(dfplot$value, c(0.01, 0.99)))
ylimits <- c(1.5 * min(quants[1], qnorm(alpha)), 1.5 * max(quants[2], qnorm(1 - alpha)))
p1 <- ggplot(dfplotCop, aes(model, value, colour = model))
p1 <- p1 + ylim(ylimits[1], ylimits[2])
p1 <- p1 + geom_rect(mapping=aes(xmin=-Inf, xmax=Inf, ymin=qnorm(alpha), ymax=qnorm(1-alpha)), fill = "gray75", color="gray75", alpha=alpha)
p1 <- p1 + geom_boxplot(outlier.shape = NA) + geom_hline(yintercept = 0, linetype = "dashed", color = "gray25")
p1 <- p1 + facet_grid(rows = vars(tau),
labeller = label_bquote(rows = theta==.(tau)))
scval <- strsplit(this_score, split = "_")[[1]][1]
if(scval == "es"){
title <- paste("Energy Score for",cop,"copula")
p1 <- p1 + ggtitle(title)
}
if(scval == "vs1"){
title <- paste("Variogram Score for",cop,"copula")
p1 <- p1 + ggtitle(title)
}
p1 <- p1 + theme_bw() + theme(legend.position = "bottom")
p1 <- p1 + xlab("Model") + ylab("DM test statistic")
p1 <- p1 + scale_color_manual(values = mypal_use, name = "Model", label = model_vec)
p1 <- p1 + scale_x_discrete(label = model_vec)
return(p1)
}
saveFigure <- function(fileName, fig) {
res <- 400
ggsave(
paste0(plot_folder, fileName),
fig,
width = plotWidth,
height = plotHeight,
dpi = res
)
}
## ES
this_score <- "es_list"
dfplot <- subset(df2, score == this_score)
plotScoresTau(dfplot, "Frank", this_score)
View(dfplot)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output/DM_TestStatistic_computation_Archimedean - Copy.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output/DM_TestStatistic_computation_Archimedean - Copy.R")
res$tau
dfmc$tau
dfmc$tau[ind]
input_scores
View(dfmc)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output/DM_TestStatistic_computation_Archimedean - Copy.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output/DM_TestStatistic_computation_Archimedean - Copy.R")
View(dfmc)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output/DM_TestStatistic_computation_Archimedean - Copy.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output/DM_TestStatistic_computation_Archimedean - Copy.R")
View(dfmc)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output/DM_TestStatistic_computation_Archimedean - Copy.R")
load("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/Data/TestStatistic/TestStatistic_Archimedean_setting_1_obsmodel_2_fcmodel_2.Rdata")
View(dfmc)
# code to compute test statistics of DM tests
# results are saved in a specific data frame format to simplify plotting later on
rm(list=ls())
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output")
# parameters
# Should be the same as in run_setting?.R
# parameters to run
# Dependence parameter between weather variables for observations
# input_theta0 <- c(5, 10)
# Dependence parameter between weather variables for ensemble forecasts
# input_theta <- c(5, 10)
# Copula type
input_copula <- c("Frank","Gumbel", "Clayton")
# Dimension
input_d <- 3
# Put the parameters in a grid
input_par <- expand.grid(input_copula, input_d)
names(input_par) <- c("copula",  "d")
# Number of Monte Carlo repetitions
MC_reps <- 100
# Setting parameter for different runs
setting <- 1
# Model 1 : Standard Gaussian Marginals
observationsModel <- 2
forecastModel <- 2
fName <- paste0("Archimedean","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,"_ID_")
df_raw <- data.frame(input_par)
df_raw$simID <- 1:nrow(df_raw)
flist <- list.files("../Data/Rdata/")
existing <- as.numeric(sapply(flist, FUN = function(x) as.numeric(strsplit(strsplit(x, fName)[[1]][2], ".Rdata"))))
df <- df_raw[which(is.element(df_raw$simID, existing)),]
load(paste0("../Data/Rdata/",fName, "1.Rdata"))
input_models <- names(res$es_list)
input_scores <- names(res)
df_use <- as.data.frame(df[1,])
df_use$model <- as.character("a")
df_use$score <- as.character("a")
model_score_grid <- expand.grid(input_models, input_scores)
# Produces df of the form
#         rho0  eps   sigma   rho   d   simID   model   score
#   1     0.1   0     0.5     0.1   3   1       ens     crps_list
for(i in 1:nrow(df)){
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),] <- df[i,]
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$model <- as.character(model_score_grid$Var1)
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$score <- as.character(model_score_grid$Var2)
}
# Makes a copy of df_use for each MC_rep
dfmc <- data.frame(cbind(zoo::coredata(df_use)[rep(seq(nrow(df_use)),MC_reps),]))
dfmc$value <- NA
dfmc$tau <- NA
View(dfmc)
View(df)
existing
subset(existing, !is.na(existing))
# code to compute test statistics of DM tests
# results are saved in a specific data frame format to simplify plotting later on
rm(list=ls())
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output")
# parameters
# Should be the same as in run_setting?.R
# parameters to run
# Dependence parameter between weather variables for observations
# input_theta0 <- c(5, 10)
# Dependence parameter between weather variables for ensemble forecasts
# input_theta <- c(5, 10)
# Copula type
input_copula <- c("Frank","Gumbel", "Clayton")
# Dimension
input_d <- 3
# Repetitions
repetitions <- 10
# Put the parameters in a grid
input_par <- expand.grid(input_copula, input_d, 1:repetitions)
names(input_par) <- c("copula",  "d", "repetition")
# Number of Monte Carlo repetitions
MC_reps <- 75
# Setting parameter for different runs
setting <- 1
# Model 1 : Standard Gaussian Marginals
observationsModel <- 2
forecastModel <- 2
fName <- paste0("Archimedean","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,"_ID_")
df_raw <- data.frame(input_par)
df_raw$simID <- 1:nrow(df_raw)
flist <- list.files("../Data/Rdata/")
existing <- as.numeric(sapply(flist, FUN = function(x) as.numeric(strsplit(strsplit(x, fName)[[1]][2], ".Rdata"))))
df <- df_raw[which(is.element(df_raw$simID, existing)),]
load(paste0("../Data/Rdata/",fName, "1.Rdata"))
input_models <- names(res$es_list)
input_scores <- names(res)
df_use <- as.data.frame(df[1,])
df_use$model <- as.character("a")
df_use$score <- as.character("a")
model_score_grid <- expand.grid(input_models, input_scores)
# Produces df of the form
#         rho0  eps   sigma   rho   d   simID   model   score
#   1     0.1   0     0.5     0.1   3   1       ens     crps_list
for(i in 1:nrow(df)){
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),] <- df[i,]
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$model <- as.character(model_score_grid$Var1)
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$score <- as.character(model_score_grid$Var2)
}
# Makes a copy of df_use for each MC_rep
dfmc <- data.frame(cbind(zoo::coredata(df_use)[rep(seq(nrow(df_use)),MC_reps),]))
dfmc$value <- NA
dfmc$tau <- NA
# head(dfmc)
library(forecast) # for DM test function
View(dfmc)
input_models
input_scores
subset(input_scores, input_scores != "param_list" && input_scores != "indep_list" && input_scores != "timing_list" && input_scores != "tau")
subset(input_scores, input_scores != "param_list")
TRUE
TRUE && FALSE
subset(input_scores, input_scores != "param_list" && input_scores != "indep_list")
t(input_scores)
input_scores
input_scores[!input_scores %in% c("param_list", "indep_list")]
input_scores[!input_scores %in% c("param_list", "indep_list", "tau")]
# code to compute test statistics of DM tests
# results are saved in a specific data frame format to simplify plotting later on
rm(list=ls())
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output")
# parameters
# Should be the same as in run_setting?.R
# parameters to run
# Dependence parameter between weather variables for observations
# input_theta0 <- c(5, 10)
# Dependence parameter between weather variables for ensemble forecasts
# input_theta <- c(5, 10)
# Copula type
input_copula <- c("Frank","Gumbel", "Clayton")
# Dimension
input_d <- 3
# Repetitions
repetitions <- 10
# Put the parameters in a grid
input_par <- expand.grid(input_copula, input_d, 1:repetitions)
names(input_par) <- c("copula",  "d", "repetition")
# Number of Monte Carlo repetitions
MC_reps <- 75
# Setting parameter for different runs
setting <- 1
# Model 1 : Standard Gaussian Marginals
observationsModel <- 2
forecastModel <- 2
fName <- paste0("Archimedean","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,"_ID_")
df_raw <- data.frame(input_par)
df_raw$simID <- 1:nrow(df_raw)
flist <- list.files("../Data/Rdata/")
existing <- as.numeric(sapply(flist, FUN = function(x) as.numeric(strsplit(strsplit(x, fName)[[1]][2], ".Rdata"))))
df <- df_raw[which(is.element(df_raw$simID, existing)),]
load(paste0("../Data/Rdata/",fName, "1.Rdata"))
input_models <- names(res$es_list)
input_scores <- names(res)
df_use <- as.data.frame(df[1,])
df_use$model <- as.character("a")
df_use$score <- as.character("a")
model_score_grid <- expand.grid(input_models, input_scores[!input_scores %in% c("param_list", "indep_list", "tau")])
# Produces df of the form
#         rho0  eps   sigma   rho   d   simID   model   score
#   1     0.1   0     0.5     0.1   3   1       ens     crps_list
for(i in 1:nrow(df)){
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),] <- df[i,]
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$model <- as.character(model_score_grid$Var1)
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$score <- as.character(model_score_grid$Var2)
}
# Makes a copy of df_use for each MC_rep
dfmc <- data.frame(cbind(zoo::coredata(df_use)[rep(seq(nrow(df_use)),MC_reps),]))
dfmc$value <- NA
dfmc$tau <- NA
# head(dfmc)
library(forecast) # for DM test function
View(dfmc)
# code to compute test statistics of DM tests
# results are saved in a specific data frame format to simplify plotting later on
rm(list=ls())
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output")
# parameters
# Should be the same as in run_setting?.R
# parameters to run
# Dependence parameter between weather variables for observations
# input_theta0 <- c(5, 10)
# Dependence parameter between weather variables for ensemble forecasts
# input_theta <- c(5, 10)
# Copula type
input_copula <- c("Frank","Gumbel", "Clayton")
# Dimension
input_d <- 3
# Repetitions
repetitions <- 10
# Put the parameters in a grid
input_par <- expand.grid(input_copula, input_d, 1:repetitions)
names(input_par) <- c("copula",  "d", "repetition")
# Number of Monte Carlo repetitions
MC_reps <- 75
# Setting parameter for different runs
setting <- 1
# Model 1 : Standard Gaussian Marginals
observationsModel <- 2
forecastModel <- 2
fName <- paste0("Archimedean","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,"_ID_")
df_raw <- data.frame(input_par)
df_raw$simID <- 1:nrow(df_raw)
flist <- list.files("../Data/Rdata/")
existing <- as.numeric(sapply(flist, FUN = function(x) as.numeric(strsplit(strsplit(x, fName)[[1]][2], ".Rdata"))))
df <- df_raw[which(is.element(df_raw$simID, existing)),]
load(paste0("../Data/Rdata/",fName, "1.Rdata"))
input_models <- names(res$es_list)
input_scores <- names(res)
df_use <- as.data.frame(df[1,])
df_use$model <- as.character("a")
df_use$score <- as.character("a")
model_score_grid <- expand.grid(input_models, input_scores[!input_scores %in% c("param_list", "indep_list", "tau", "timing_list")])
# Produces df of the form
#         rho0  eps   sigma   rho   d   simID   model   score
#   1     0.1   0     0.5     0.1   3   1       ens     crps_list
for(i in 1:nrow(df)){
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),] <- df[i,]
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$model <- as.character(model_score_grid$Var1)
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$score <- as.character(model_score_grid$Var2)
}
# Makes a copy of df_use for each MC_rep
dfmc <- data.frame(cbind(zoo::coredata(df_use)[rep(seq(nrow(df_use)),MC_reps),]))
dfmc$value <- NA
dfmc$tau <- NA
# head(dfmc)
library(forecast) # for DM test function
View(dfmc)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output/DM_TestStatistic_computation_Archimedean - Copy.R")
View(dfmc)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output/DM_TestStatistic_computation_Archimedean - Copy.R")
View(dfmc)
rm(list=ls())
library(ggplot2)
library(gridExtra)
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures")
# Model 1 : Standard Gaussian Marginals
observationsModel <- 2
forecastModel <- 2
setting <- 1
load(paste0("../Data/TestStatistic/TestStatistic_Archimedean","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".Rdata"))
df <- dfmc; rm(dfmc)
df1 <- subset(df)
input_theta0 <- c(5, 10)
input_theta <- c(5, 10)
input_copula <- c("Frank","Gumbel", "Clayton")
input_d <- 3
df1$value <- (-1)*df1$value
df0 <- df1
input_scores <- unique(df1$score)
plot_folder <- paste0("../Data/Plots/Arch","_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,"/")
dir.create(file.path(plot_folder), showWarnings = FALSE)
# drop model == "ens"
df1_save <- df1
df1 <- subset(df1_save, model != "ens")
# also drop EMOS.Q
df2 <- subset(df1, model != "emos.q")
mypal <- colorspace::rainbow_hcl(8)
mypal_use <- c("decc.q" = mypal[1],
"ecc.q" = mypal[2],
"ecc.s" = mypal[3],
"gca" = mypal[4],
"ssh" = mypal[5],
"clayton" = mypal[6],
"frank" = mypal[7],
"gumbel" = mypal[8])
df2$model <- factor(df2$model, levels = c("decc.q", "ecc.q", "ecc.s", "gca", "ssh", "clayton", "frank", "gumbel"))
model_vec <- c("dECC", "ECC-Q", "ECC-S", "GCA", "SSh", "Clayton", "Frank", "Gumbel")
ylimitFunc <- function(val1, val2) {
return(1.5 * max(abs(val1), abs(val2)))
}
# Plot the scores for copula
plotScores <- function(dfplot, cop, this_score){
dfplotCop <- subset(dfplot, copula == cop)
alpha <- 0.25
quants <- unname(quantile(dfplot$value, c(0.01, 0.99)))
ylimits <- c(1.5 * min(quants[1], qnorm(alpha)), 1.5 * max(quants[2], qnorm(1 - alpha)))
p1 <- ggplot(dfplotCop, aes(model, value, colour = model))
p1 <- p1 + ylim(ylimits[1], ylimits[2])
p1 <- p1 + geom_rect(mapping=aes(xmin=-Inf, xmax=Inf, ymin=qnorm(alpha), ymax=qnorm(1-alpha)), fill = "gray75", color="gray75", alpha=alpha)
p1 <- p1 + geom_boxplot(outlier.shape = NA) + geom_hline(yintercept = 0, linetype = "dashed", color = "gray25")
p1 <- p1 + facet_grid(rows = vars(theta), cols = vars(theta0),
labeller = label_bquote(rows = theta==.(theta),
cols = theta[0]==.(theta0)))
scval <- strsplit(this_score, split = "_")[[1]][1]
if(scval == "es"){
title <- paste("Energy Score for",cop,"copula")
p1 <- p1 + ggtitle(title)
}
if(scval == "vs1"){
title <- paste("Variogram Score for",cop,"copula")
p1 <- p1 + ggtitle(title)
}
p1 <- p1 + theme_bw() + theme(legend.position = "bottom")
p1 <- p1 + xlab("Model") + ylab("DM test statistic")
p1 <- p1 + scale_color_manual(values = mypal_use, name = "Model", label = model_vec)
p1 <- p1 + scale_x_discrete(label = model_vec)
return(p1)
}
plotScoresTau <- function(dfplot, cop, this_score){
dfplotCop <- subset(dfplot, copula == cop)
alpha <- 0.25
quants <- unname(quantile(dfplot$value, c(0.01, 0.99)))
ylimits <- c(1.5 * min(quants[1], qnorm(alpha)), 1.5 * max(quants[2], qnorm(1 - alpha)))
p1 <- ggplot(dfplotCop, aes(model, value, colour = model))
p1 <- p1 + ylim(ylimits[1], ylimits[2])
p1 <- p1 + geom_rect(mapping=aes(xmin=-Inf, xmax=Inf, ymin=qnorm(alpha), ymax=qnorm(1-alpha)), fill = "gray75", color="gray75", alpha=alpha)
p1 <- p1 + geom_boxplot(outlier.shape = NA) + geom_hline(yintercept = 0, linetype = "dashed", color = "gray25")
p1 <- p1 + facet_grid(rows = vars(tau),
labeller = label_bquote(rows = theta==.(tau)))
scval <- strsplit(this_score, split = "_")[[1]][1]
if(scval == "es"){
title <- paste("Energy Score for",cop,"copula")
p1 <- p1 + ggtitle(title)
}
if(scval == "vs1"){
title <- paste("Variogram Score for",cop,"copula")
p1 <- p1 + ggtitle(title)
}
p1 <- p1 + theme_bw() + theme(legend.position = "bottom")
p1 <- p1 + xlab("Model") + ylab("DM test statistic")
p1 <- p1 + scale_color_manual(values = mypal_use, name = "Model", label = model_vec)
p1 <- p1 + scale_x_discrete(label = model_vec)
return(p1)
}
saveFigure <- function(fileName, fig) {
res <- 400
ggsave(
paste0(plot_folder, fileName),
fig,
width = plotWidth,
height = plotHeight,
dpi = res
)
}
## ES
this_score <- "es_list"
dfplot <- subset(df2, score == this_score)
dfplot$equalThetas <- (dfplot$theta0 == dfplot$theta)
plotScoresTau(dfplot, "Frank", this_score)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
View(dfplot)
max(dfplot$repetition)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
load("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/Data/Rdata/Archimedean_setting_1_obsmodel_2_fcmodel_2_ID_30.Rdata")
View(res)
res[["indep_list"]]
sum(res[["indep_list"]])
sum(res[["indep_list"]]$gumbel)
sum(res[["indep_list"]]$frank)
sum(res[["indep_list"]]$clayton)
sum(sum(res[["indep_list"]]$clayton))
sum(sum(res[["indep_list"]]$gumbel))
sum(sum(res[["indep_list"]]$frank))
dim(res[["indep_list"]]$gumbel)
75*100*3
2/22500
