plotTheme <- theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"),
plot.title = element_text(hjust = 0.5))
# Create plots for T over time
createSeasonPlots <- function(data) {
return(
map(c("obs", ensembleMembers), function(member) {
ggplot(data, aes_string(x = "time", y = member)) + geom_point() +
labs(x = "Time", y = "Temperature (K)") +
ggtitle(member) + plotTheme
})
)
}
# Get the plots
seasonPlot1 <- createSeasonPlots(data1)
seasonPlot2 <- createSeasonPlots(data2)
seasonPlot3 <- createSeasonPlots(data3)
savePlots("SeasonPair_group_2.png",ggarrange(plotlist = seasonPlot2[1:2],nrow = 1,ncol = 2))
plotTheme <- theme(axis.text=element_text(size=20),
axis.title=element_text(size=25,face="bold"),
plot.title = element_text(size=40,hjust = 0.5))
# Create plots for T over time
createSeasonPlots <- function(data) {
return(
map(c("obs", ensembleMembers), function(member) {
ggplot(data, aes_string(x = "time", y = member)) + geom_point() +
labs(x = "Time", y = "Temperature (K)") +
ggtitle(member) + plotTheme
})
)
}
# Get the plots
seasonPlot1 <- createSeasonPlots(data1)
seasonPlot2 <- createSeasonPlots(data2)
seasonPlot3 <- createSeasonPlots(data3)
savePlots("SeasonPair_group_2.png",ggarrange(plotlist = seasonPlot2[1:2],nrow = 1,ncol = 2))
plotTheme <- theme(axis.text=element_text(size=20),
axis.title=element_text(size=25,face="bold"),
plot.title = element_text(size=35,hjust = 0.5))
# Create plots for T over time
createSeasonPlots <- function(data) {
return(
map(c("obs", ensembleMembers), function(member) {
ggplot(data, aes_string(x = "time", y = member)) + geom_point() +
labs(x = "Time", y = "Temperature (K)") +
ggtitle(member) + plotTheme
})
)
}
# Get the plots
seasonPlot1 <- createSeasonPlots(data1)
seasonPlot2 <- createSeasonPlots(data2)
seasonPlot3 <- createSeasonPlots(data3)
savePlots("SeasonPair_group_2.png",ggarrange(plotlist = seasonPlot2[1:2],nrow = 1,ncol = 2))
# QQ plots on normality assumption with 95% confidence interval
createQqPlots <- function(data){
ensemblePlots <- map(ensembleMembers, function(member) {
ggplot(data = data, mapping = aes_string(sample = member)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
annotate("text",x=max(data[[member]]),y=min(data[[member]]),hjust=1,label=paste0("Shapiro p-value: ", signif(shapiro.test(data[[member]])$p.value, digits = 3))) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle(member) + plotTheme
})
nonNAdata <- data$obs[!is.na(data$obs)]
observationsPlot <- list(ggplot(data = data, mapping = aes(sample = obs)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
annotate("text",x=max(nonNAdata),y=min(nonNAdata),hjust=1,label=paste0("Shapiro p-value: ", signif(shapiro.test(nonNAdata)$p.value, digits = 3))) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("obs") + plotTheme )
return(c(observationsPlot, ensemblePlots))
}
# QQ plots of all data
qqPlots1 <- createQqPlots(data1)
qqPlots2 <- createQqPlots(data2)
qqPlots3 <- createQqPlots(data3)
# QQ plots of one month
qqPlots1month <- createQqPlots(data1month)
qqPlots2month <- createQqPlots(data2month)
qqPlots3month <- createQqPlots(data3month)
savePlots("SeasonPair_group_2.png",ggarrange(plotlist = seasonPlot2[1:2],nrow = 1,ncol = 2))
savePlots("QQPair_group_2.png",ggarrange(plotlist = rbind(qqPlots2[1],qqPlots2month[1]),nrow = 1,ncol = 2))
createQqPlots <- function(data){
ensemblePlots <- map(ensembleMembers, function(member) {
ggplot(data = data, mapping = aes_string(sample = member)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
annotate("text", size = 18, x=max(data[[member]]),y=min(data[[member]]),hjust=1,label=paste0("Shapiro p-value: ", signif(shapiro.test(data[[member]])$p.value, digits = 3))) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle(member) + plotTheme
})
nonNAdata <- data$obs[!is.na(data$obs)]
observationsPlot <- list(ggplot(data = data, mapping = aes(sample = obs)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
annotate("text",size = 18,x=max(nonNAdata),y=min(nonNAdata),hjust=1,label=paste0("Shapiro p-value: ", signif(shapiro.test(nonNAdata)$p.value, digits = 3))) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("obs") + plotTheme )
return(c(observationsPlot, ensemblePlots))
}
# QQ plots of all data
qqPlots1 <- createQqPlots(data1)
qqPlots2 <- createQqPlots(data2)
qqPlots3 <- createQqPlots(data3)
# QQ plots of one month
qqPlots1month <- createQqPlots(data1month)
qqPlots2month <- createQqPlots(data2month)
qqPlots3month <- createQqPlots(data3month)
savePlots("QQPair_group_2.png",ggarrange(plotlist = rbind(qqPlots2[1],qqPlots2month[1]),nrow = 1,ncol = 2))
createQqPlots <- function(data){
ensemblePlots <- map(ensembleMembers, function(member) {
ggplot(data = data, mapping = aes_string(sample = member)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
annotate("text", size = 12, x=max(data[[member]]),y=min(data[[member]]),hjust=1,label=paste0("Shapiro p-value: ", signif(shapiro.test(data[[member]])$p.value, digits = 3))) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle(member) + plotTheme
})
nonNAdata <- data$obs[!is.na(data$obs)]
observationsPlot <- list(ggplot(data = data, mapping = aes(sample = obs)) +
stat_qq_band() +
stat_qq_line() +
stat_qq_point() +
annotate("text",size = 12,x=max(nonNAdata),y=min(nonNAdata),hjust=1,label=paste0("Shapiro p-value: ", signif(shapiro.test(nonNAdata)$p.value, digits = 3))) +
labs(x = "Theoretical Quantiles", y = "Sample Quantiles") +
ggtitle("obs") + plotTheme )
return(c(observationsPlot, ensemblePlots))
}
# QQ plots of all data
qqPlots1 <- createQqPlots(data1)
qqPlots2 <- createQqPlots(data2)
qqPlots3 <- createQqPlots(data3)
# QQ plots of one month
qqPlots1month <- createQqPlots(data1month)
qqPlots2month <- createQqPlots(data2month)
qqPlots3month <- createQqPlots(data3month)
savePlots("QQPair_group_2.png",ggarrange(plotlist = rbind(qqPlots2[1],qqPlots2month[1]),nrow = 1,ncol = 2))
createCorrelationPlots <- function(data, compareTo) {
return(
map(c("obs", ensembleMembers), function(member) {
ggplot(data, aes_string(x = compareTo, y = member)) + geom_point() +
geom_abline(intercept = 0, slope = 1, color="steelblue",
linetype="dashed", size = 1.5)  + plotTheme
})
)
}
# Get the plots
correlationPlots1 <- createCorrelationPlots(data1, "obs")
correlationPlots2 <- createCorrelationPlots(data2, "obs")
correlationPlots3 <- createCorrelationPlots(data3, "obs")
# Correlations between ensemble members
correlationPlotsEns1 <- createCorrelationPlots(data1, "laef1")
correlationPlotsEns2 <- createCorrelationPlots(data2, "laef1")
correlationPlotsEns3 <- createCorrelationPlots(data3, "laef1")
savePlots("CorrelationPair_group_2.png",ggarrange(plotlist = correlationPlots2[1:2],nrow = 1,ncol = 2))
savePlots("CorrelationPairEnsemble_group_2.png",ggarrange(plotlist = correlationPlotsEns2[2:3],nrow = 1,ncol = 2))
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/mv_hist_data.R")
mvr.histogram <- function(modelName, histType, d = 1)
{
B <- reformat(modelName)
x <- c()
for(i in 1:days){
if (histType == "multivariate") {
x <- c(x, mv.rank(B[[i]])[1])
} else if (histType == "average") {
# B.ranks <- apply(B[[i]],2,rank)
# B.preranks <- apply(B.ranks,1,mean)
# x <- c(x, rank(B.preranks,ties="random")[1])
x <- c(x, avg.rank(B[[i]])[1])
} else if (histType == "bandDepth") {
x <- c(x, bd.rank(B[[i]])[1])
} else if (histType == "tree") {
x <- c(x, mst.rank(B[[i]])[1])
} else if (histType == "uv") {
x <- c(x, uv.rank(B[[i]], d)[1])
}
}
# .GlobalEnv$x <- x
# hist(x,breaks=seq(0,20,by=1),main="",xlab=hist_xlab,ylab=hist_ylab,axes=FALSE,col="gray40",border="white",ylim=hist_ylim)
# ggplot(dfplot, aes(model, value, colour = model))
intercept <- days/(m+1)
highestValue <- max(sapply(1:(m+1), FUN = function(s) sum(x == s)))
p <- ggplot() + aes(x) + geom_histogram(breaks = seq(0, (m+1), 1)) +
geom_hline(yintercept = intercept, col="steelblue", linetype = "dashed") +
scale_x_continuous(breaks = seq(0, (m+1) , 1), labels=round(seq(0, (m+1) , 1)/ (m+1), 2)) +
scale_y_continuous(breaks = seq(0, highestValue, intercept), labels = seq(0, highestValue / intercept, 1)) +
labs(y = "Frequency ratio", x = "Normalized rank value")
if (histType == "multivariate") {
p <- p + ggtitle(paste("Multivariate rank histogram for", modelName))
} else if (histType == "average") {
p <- p + ggtitle(paste("Average rank histogram for", modelName))
} else if (histType == "bandDepth") {
p <- p + ggtitle(paste("Band depth rank histogram for", modelName))
} else if (histType == "tree") {
p <- p + ggtitle(paste("Minimum spanning tree rank histogram for", modelName))
}
p <- p + plotTheme
return(p)
}
plotTheme <- theme(axis.text=element_text(size=20),
axis.title=element_text(size=25,face="bold"),
plot.title = element_text(size=35,hjust = 0.5))
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/mv_hist_data.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/mv_hist_data.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/mv_hist_data.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/mv_hist_data.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/mv_hist_data.R")
# uv
for (dd in 1:dim(dat$ens)[3]) {
savePath <- paste0(plot_folder, "uv_d=",dd,"/")
dir.create(file.path(savePath), showWarnings = FALSE)
plotWidth <-  8
plotHeight <- 8
plot_vec <- c()
plot_vec2 <- c()
for (model in names(dat)) {
if (model != "emos.q") {
p <- mvr.histogram(modelName = model, histType = "uv", d = dd)
plot_vec <- c(plot_vec, list(p))
savePlots(paste0("uv_d=",dd,"/PIT_group_", groupNR, "_", model,"_univariate_d=",dd,".png"), p)
if (model %in% c("ens", "Clayton", "Frank", "Gumbel")) {
plot_vec2 <- c(plot_vec2, list(p))
}
}
}
cols <- 5
rows <- 2
plotWidth <-  5 * cols
plotHeight <- 5 * rows
savePlots(paste0("uv_d=",dd,"/PIT_group_", groupNR, "_grid_univariate_d=",dd, ".png"),ggarrange(plotlist = plot_vec,nrow = rows,ncol = cols))
cols <- 2
rows <- 2
plotWidth <-  5 * cols
plotHeight <- 5 * rows
savePlots(paste0(histType,"/PIT_group_", groupNR, "_Special_univariate_d=",dd,"_type=", histType, ".png"),ggarrange(plotlist = plot_vec2,nrow = rows,ncol = cols))
}
# uv
for (dd in 1:dim(dat$ens)[3]) {
savePath <- paste0(plot_folder, "uv_d=",dd,"/")
dir.create(file.path(savePath), showWarnings = FALSE)
plotWidth <-  8
plotHeight <- 8
plot_vec <- c()
plot_vec2 <- c()
for (model in names(dat)) {
if (model != "emos.q") {
p <- mvr.histogram(modelName = model, histType = "uv", d = dd)
plot_vec <- c(plot_vec, list(p))
savePlots(paste0("uv_d=",dd,"/PIT_group_", groupNR, "_", model,"_univariate_d=",dd,".png"), p)
if (model %in% c("ens", "Clayton", "Frank", "Gumbel")) {
plot_vec2 <- c(plot_vec2, list(p))
}
}
}
cols <- 5
rows <- 2
plotWidth <-  5 * cols
plotHeight <- 5 * rows
savePlots(paste0("uv_d=",dd,"/PIT_group_", groupNR, "_grid_univariate_d=",dd, ".png"),ggarrange(plotlist = plot_vec,nrow = rows,ncol = cols))
cols <- 2
rows <- 2
plotWidth <-  5 * cols
plotHeight <- 5 * rows
savePlots(paste0("uv_d=",dd,"/PIT_group_", groupNR, "_Special_univariate_d=",dd,"_type=", histType, ".png"),ggarrange(plotlist = plot_vec2,nrow = rows,ncol = cols))
}
mean(obs_one)
# Observations
obs_one <- c(296.80, 292.85, 299.05, 287.76, 289.68)
obs_two <- c(284.90, 284.97, 285.06, 285.58, 285.29)
# ensemble members
ens_one <- c(284.70, 282.20, 292.68, 295.75, 284.78)
ens_two <- c(284.50, 283.93, 285.74, 282.70, 284.66)
mean(obs_one)
mean(obs_one)+7
var(obs_one)
22.32127*0.9+0.03
sum(obs_one^2)/25
sqrt(sum(obs_one^2)/25)
sqrt(sum((obs_one-mean(obs_one))^2/25)
)
sum((obs_one-mean(obs_one))^2
)
sum((obs_one-mean(obs_one))^2)
sum((obs_one-mean(obs_one))^2)/4
var(obs_one)
mean(obs_one)
0.03+0.9*var(obs_one)
var(obs_one)
# round(rnorm(5, mean = 285, sd = 1),2)
# Observations
obs_one <- c(296.80, 292.85, 299.05, 287.76, 289.68)
obs_two <- c(284.90, 284.97, 285.06, 285.58, 285.29)
# ensemble members
ens_one <- c(284.70, 282.20, 292.68, 295.75, 284.78)
ens_two <- c(284.50, 283.93, 285.74, 282.70, 284.66)
7+mean(obs_one)
moments <- function(x, m) {
return(sum(x^m)/length(x))
}
moments(obs_one, 1)
moments(obs_one, 1)
moments(obs_one, 2)
moments(obs_one, 2)
sdestimate <- function(x) {
return(sqrt(moments(x, 2) - moments(x,1)^2))
}
sdestimate(obs_one)^2
sdestimate(obs_one)^2
toTable <- function(x,y) {
textresult <- ""
for (i in 1:length(ens_one)) {
textresult <- paste0(textresult, i, " & (", rank(x)[i], ") ", x[i], " & (", rank(y)[i], ") ", y[i], "\\ ")
}
return(textresult)
}
toTable(obs_one, obs_two)
sample_one <- round(rnorm(5, mean = 300.23, sd = sqrt(20.12)),2)
sample_two <- round(rnorm(5, mean = 285.16, sd = sqrt(0.06)),2)
toTable(sample_one, sample_two)
indexShift <- function(x,y) {
index <- c()
for (i in 1:5) {
index <- c(index, match(rank(x)[i], rank(y))[1])
}
return(index)
}
shuffle_sample <- function(x,y) {
index <- indexShift(x,y)
out <- array(NA, dim=5)
for (i in 1:5) {
out[index[i]] <- x[i]
}
return(out)
}
toTable(shuffle_sample(sample_one, obs_one), shuffle_sample(sample_two, obs_one))
toTable(shuffle_sample(sample_one, obs_one), shuffle_sample(sample_two, obs_two))
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
ens
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ParamFitting.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ParamFitting.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ParamFitting.R")
sprintf("Success rate is %0.1f%%",100*counterGood/(length(cops)^2*MC_reps*length(days)))
dfplot$daysString <- as.character(dfplot$days)
dfplot$differenceTau <- dfplot$tauValue - tau
mypal <- colorspace::rainbow_hcl(5)
mypal_use <- c("1" = mypal[1],
"3" = mypal[2],
"5" = mypal[3],
"10" = mypal[4],
"30" = mypal[5])
# Plot for tau
quants <- unname(quantile(dfplot$differenceTau, c(0.1, 0.9)))
ylimits <- c(1.5 * quants[1], 1.5 *quants[2])
level_order <- factor(dfplot$daysString, level = as.character(days))
p1 <- ggplot(dfplot, aes(level_order, differenceTau, colour = daysString))
p1 <- p1 + ylim(ylimits[1], ylimits[2])
p1 <- p1 + geom_boxplot(outlier.shape = NA) + geom_hline(yintercept = 0, linetype = "dashed", color = "gray25")
p1 <- p1 + facet_grid(rows = vars(inputCopula), cols = vars(fittingMethod),
labeller = label_bquote(rows = observations: .(inputCopula),
cols = fitting: .(fittingMethod)))
p1 <- p1 + ggtitle(bquote(Evaluation~of~concordance~after~fitting~(tau ==.(tau))))
p1 <- p1 + theme_bw() + theme(legend.position = "bottom")
p1 <- p1 + xlab("Days") + ylab(bquote(Difference~fitted~and~actual~value~of~tau))
p1 <- p1 + scale_color_manual(values = mypal_use, name = "Training days") +
theme(plot.title = element_text(hjust = 0.5))
plotWidth <- 9
plotHeight <- 6
res <- 400
fileName <- paste0("Arch_ParamFitting_Tau_", tau, ".png")
plot_folder <- paste0("../Data/Plots/")
ggsave(
paste0(plot_folder, fileName),
p1,
width = plotWidth,
height = plotHeight,
dpi = res
)
#
# # Plot for theta
# dfplot$differenceTheta <- dfplot$paramValue
# dfplot$differenceTheta[dfplot$fittingMethod == "Clayton"] <- dfplot$differenceTheta[dfplot$fittingMethod == "Clayton"] - 2 * tau / (1-tau)
# dfplot$differenceTheta[dfplot$fittingMethod == "Frank"] <- dfplot$differenceTheta[dfplot$fittingMethod == "Frank"] - tau2par("frk",tau)
# dfplot$differenceTheta[dfplot$fittingMethod == "Gumbel"] <- dfplot$differenceTheta[dfplot$fittingMethod == "Gumbel"] - tau2par("gum",tau)
#
# quants <- unname(quantile(dfplot$differenceTheta, c(0.1, 0.9)))
#
# ylimits <- c(1.5 * quants[1], 1.5 *quants[2])
#
# level_order <- factor(dfplot$daysString, level = as.character(days))
#
#
# p1 <- ggplot(dfplot, aes(level_order, differenceTheta, colour = daysString))
# p1 <- p1 + ylim(ylimits[1], ylimits[2])
# p1 <- p1 + geom_boxplot(outlier.shape = NA) + geom_hline(yintercept = 0, linetype = "dashed", color = "gray25")
# p1 <- p1 + facet_grid(rows = vars(inputCopula), cols = vars(fittingMethod),
#                       labeller = label_bquote(rows = observations: .(inputCopula),
#                                               cols = fitting: .(fittingMethod)))
#
#
#
# p1 <- p1 + ggtitle(bquote(Evaluation~of~parameter~fitting~(tau==.(tau))))
#
#
#
# p1 <- p1 + theme_bw() + theme(legend.position = "bottom")
# p1 <- p1 + xlab("Days") + ylab("Difference fitted parameter and parameter by tau inversion")
# p1 <- p1 + scale_color_manual(values = mypal_use, name = "Training days") +
#   theme(plot.title = element_text(hjust = 0.5))
#
# plotWidth <- 9
# plotHeight <- 6
# res <- 400
# fileName <- "Arch_ParamFitting_Param.png"
#
# plot_folder <- paste0("../Data/Plots/")
#
# ggsave(
#   paste0(plot_folder, fileName),
#   p1,
#   width = plotWidth,
#   height = plotHeight,
#   dpi = res
# )
#
#
#
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ParamFitting.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ParamFitting.R")
rm(list=ls())
# "source" directory
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code")
source("getData.R")
getData()
library(ggplot2)
library(ggpubr)
library(purrr)
library(qqplotr)
plotTheme <- theme(axis.text=element_text(size=20),
axis.title=element_text(size=25,face="bold"),
plot.title = element_text(size=35,hjust = 0.5))
## Create a grid of histograms of ensemble members
# Number of ensemble members
m <- sum(grepl("laef", names(data1)))
# Plots are put in a grid
cols <- 6
rows <- 3
ensembleMembers <- sapply(1:m, FUN = function(x) paste0("laef", x))
# Save settings
saveFolder <- "Combined_LAEF_Data"
plot_folder <- paste0("../Data/Plots/", saveFolder, "/")
dir.create(file.path(plot_folder), showWarnings = FALSE)
dir.create(file.path(paste0(plot_folder, "Month/")), showWarnings = FALSE)
plotWidth <- cols * 4
plotHeight <- rows * 4
res <- 250
# Function to save the plots
savePlots <- function(fileName, plot) {
ggsave(
paste0(plot_folder, fileName),
plot,
width = plotWidth,
height = plotHeight,
dpi = res
)
}
## Investigate correlation between observations and forecasts
createCorrelationPlots <- function(data, compareTo) {
return(
map(c("obs", ensembleMembers), function(member) {
ggplot(data, aes_string(x = compareTo, y = member)) + geom_point() +
geom_abline(intercept = 0, slope = 1, color="steelblue",
linetype="dashed", size = 1.5)  + plotTheme
})
)
}
# Get the plots
correlationPlots1 <- createCorrelationPlots(data1, "obs")
correlationPlots2 <- createCorrelationPlots(data2, "obs")
correlationPlots3 <- createCorrelationPlots(data3, "obs")
# Correlations between ensemble members
correlationPlotsEns1 <- createCorrelationPlots(data1, "laef1")
correlationPlotsEns2 <- createCorrelationPlots(data2, "laef1")
correlationPlotsEns3 <- createCorrelationPlots(data3, "laef1")
savePlots("CorrelationPane_group_2.png",ggarrange(plotlist = correlationPlots2[2],nrow = 1,ncol = 2))
savePlots("CorrelationPane_group_2.png",ggarrange(plotlist = correlationPlots2[2],nrow = 1,ncol = 1))
savePlots("CorrelationPaneEnsemble_group_2.png",ggarrange(plotlist = correlationPlotsEns2[3],nrow = 1,ncol = 1))
savePlots("CorrelationPanes.png",ggarrange(plotlist = list(correlationPlots2[2],correlationPlotsEns2[3]),nrow = 1,ncol = 2))
savePlots("CorrelationPanes.png",ggarrange(plotlist = c(correlationPlots2[2],correlationPlotsEns2[3]),nrow = 1,ncol = 2))
plotWidth <- 10
plotHeight <- 10
savePlots("CorrelationPane_group_2.png",ggarrange(plotlist = correlationPlots2[2],nrow = 1,ncol = 1))
savePlots("CorrelationPaneEnsemble_group_2.png",ggarrange(plotlist = correlationPlotsEns2[3],nrow = 1,ncol = 1))
library(ggplot2)
library(ggpubr)
library(purrr)
library(qqplotr)
library(fields)
library(vegan)
View(data1)
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures")
groupNR <- 2
fName <- paste0("Res_group_", groupNR)
load(paste0("../Data/Rdata_LAEF/", fName, ".Rdata")) # loads data in "res" variable
View(res)
