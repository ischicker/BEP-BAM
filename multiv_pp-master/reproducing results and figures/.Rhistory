es_list_tmp <- vs1_list_tmp <- vs1w_list_tmp <-
vs0_list_tmp <- vs0w_list_tmp <- matrix(NA, nrow = nout, ncol = rand_rep)
crps_list_tmp <- array(NA, dim = c(nout, d, rand_rep))
timing_list_tmp <- array(NA, dim = rand_rep)
for(RR in 1:rand_rep){
start_time <- Sys.time()
emos.s <- mvpp(method = "EMOS", variant = "S", ensfc = fc$ensfc, ensfc_init = fc$ensfc_init,
obs = obs$obs, obs_init = obs$obs_init, postproc_out = pp_out, timeWindow = timeWindow)
ecc.s <- mvpp(method = "ECC", ensfc = fc$ensfc, ensfc_init = fc$ensfc_init,
obs = obs$obs, obs_init = obs$obs_init, postproc_out = pp_out,
EMOS_sample = emos.s$mvppout, timeWindow = timeWindow)
if(compute_crps){
crps_list_tmp[,,RR] <- crps_wrapper(ecc.s$mvppout, obs$obs)
}
tmp <- eval_all_mult(mvpp_out = ecc.s$mvppout, obs = obs$obs)
es_list_tmp[,RR] <- tmp$es
vs1_list_tmp[,RR] <- tmp$vs1
vs1w_list_tmp[,RR] <- tmp$vs1w
vs0_list_tmp[,RR] <- tmp$vs0
vs0w_list_tmp[,RR] <- tmp$vs0w
end_time <- Sys.time()
timing_list_tmp[RR] <- end_time - start_time
}
crps_list$ecc.s[rr,,] <- apply(crps_list_tmp, c(1,2), mean)
es_list$ecc.s[rr, ] <- apply(es_list_tmp, 1, mean)
vs1_list$ecc.s[rr, ] <- apply(vs1_list_tmp, 1, mean)
vs1w_list$ecc.s[rr, ] <- apply(vs1w_list_tmp, 1, mean)
vs0_list$ecc.s[rr, ] <- apply(vs0_list_tmp, 1, mean)
vs0w_list$ecc.s[rr, ] <- apply(vs0w_list_tmp, 1, mean)
timing_list$ecc.s[rr] <- apply(timing_list_tmp, 1, mean)
# dECC.Q
start_time <- Sys.time()
decc.q <- mvpp(method = "dECC", ensfc = fc$ensfc, ensfc_init = fc$ensfc_init,
obs = obs$obs, obs_init = obs$obs_init, postproc_out = pp_out,
EMOS_sample = emos.q$mvppout, ECC_out = ecc.q$mvppout, timeWindow = timeWindow)
if(compute_crps){
crps_list$decc.q[rr, , ] <- crps_wrapper(decc.q$mvppout, obs$obs)
}
tmp <- eval_all_mult(mvpp_out = decc.q$mvppout, obs = obs$obs)
es_list$decc.q[rr, ] <- tmp$es
vs1_list$decc.q[rr, ] <- tmp$vs1
vs1w_list$decc.q[rr, ] <- tmp$vs1w
vs0_list$decc.q[rr, ] <- tmp$vs0
vs0w_list$decc.q[rr, ] <- tmp$vs0w
end_time <- Sys.time()
timing_list$decc.q[rr] <- end_time - start_time
# SSh -> involves randomness -> repeat rand_rep times
es_list_tmp <- vs1_list_tmp <- vs1w_list_tmp <-
vs0_list_tmp <- vs0w_list_tmp <- matrix(NA, nrow = nout, ncol = rand_rep)
crps_list_tmp <- array(NA, dim = c(nout, d, rand_rep))
timing_list_tmp <- array(NA, dim = rand_rep)
for(RR in 1:rand_rep){
start_time <- Sys.time()
ssh <- mvpp(method = "SSh", ensfc = fc$ensfc, ensfc_init = fc$ensfc_init,
obs = obs$obs, obs_init = obs$obs_init, postproc_out = pp_out,
EMOS_sample = emos.q$mvppout, timeWindow = timeWindow)
if(compute_crps){
crps_list_tmp[,,RR] <- crps_wrapper(ssh$mvppout, obs$obs)
}
tmp <- eval_all_mult(mvpp_out = ssh$mvppout, obs = obs$obs)
es_list_tmp[,RR] <- tmp$es
vs1_list_tmp[,RR] <- tmp$vs1
vs1w_list_tmp[,RR] <- tmp$vs1w
vs0_list_tmp[,RR] <- tmp$vs0
vs0w_list_tmp[,RR] <- tmp$vs0w
end_time <- Sys.time()
timing_list_tmp[RR] <- end_time - start_time
}
crps_list$ssh[rr,,] <- apply(crps_list_tmp, c(1,2), mean)
es_list$ssh[rr, ] <- apply(es_list_tmp, 1, mean)
vs1_list$ssh[rr, ] <- apply(vs1_list_tmp, 1, mean)
vs1w_list$ssh[rr, ] <- apply(vs1w_list_tmp, 1, mean)
vs0_list$ssh[rr, ] <- apply(vs0_list_tmp, 1, mean)
vs0w_list$ssh[rr, ] <- apply(vs0w_list_tmp, 1, mean)
timing_list$ssh[rr] <- apply(timing_list_tmp, 1, mean)
# GCA -> involves randomness -> repeat rand_rep times
es_list_tmp <- vs1_list_tmp <- vs1w_list_tmp <-
vs0_list_tmp <- vs0w_list_tmp <- matrix(NA, nrow = nout, ncol = rand_rep)
crps_list_tmp <- array(NA, dim = c(nout, d, rand_rep))
timing_list_tmp <- array(NA, dim = rand_rep)
for(RR in 1:rand_rep){
start_time <- Sys.time()
gca <- mvpp(method = "GCA", ensfc = fc$ensfc, ensfc_init = fc$ensfc_init,
obs = obs$obs, obs_init = obs$obs_init, postproc_out = pp_out, timeWindow = timeWindow)
if(compute_crps){
crps_list_tmp[,,RR] <- crps_wrapper(gca$mvppout, obs$obs)
}
tmp <- eval_all_mult(mvpp_out = gca$mvppout, obs = obs$obs)
es_list_tmp[,RR] <- tmp$es
vs1_list_tmp[,RR] <- tmp$vs1
vs1w_list_tmp[,RR] <- tmp$vs1w
vs0_list_tmp[,RR] <- tmp$vs0
vs0w_list_tmp[,RR] <- tmp$vs0w
end_time <- Sys.time()
timing_list_tmp[RR] <- end_time - start_time
}
crps_list$gca[rr,,] <- apply(crps_list_tmp, c(1,2), mean)
es_list$gca[rr, ] <- apply(es_list_tmp, 1, mean)
vs1_list$gca[rr, ] <- apply(vs1_list_tmp, 1, mean)
vs1w_list$gca[rr, ] <- apply(vs1w_list_tmp, 1, mean)
vs0_list$gca[rr, ] <- apply(vs0_list_tmp, 1, mean)
vs0w_list$gca[rr, ] <- apply(vs0w_list_tmp, 1, mean)
timing_list$gca[rr] <- apply(timing_list_tmp, 1, mean)
# Archimedean copulas -> involves randomness -> repeat rand_rep times
for (method in c("Clayton","Frank", "Gumbel")) {
es_list_tmp <- vs1_list_tmp <- vs1w_list_tmp <-
vs0_list_tmp <- vs0w_list_tmp <- param_list_temp <- matrix(NA, nrow = nout, ncol = rand_rep)
crps_list_tmp <- array(NA, dim = c(nout, d, rand_rep))
timing_list_tmp <- array(NA, dim = rand_rep)
for(RR in 1:rand_rep){
start_time <- Sys.time()
mvd <- mvpp(method = method, ensfc = fc$ensfc, ensfc_init = fc$ensfc_init,
obs = obs$obs, obs_init = obs$obs_init, postproc_out = pp_out, timeWindow = timeWindow)
if(compute_crps){
crps_list_tmp[,,RR] <- crps_wrapper(mvd$mvppout, obs$obs)
}
tmp <- eval_all_mult(mvpp_out = mvd$mvppout, obs = obs$obs)
es_list_tmp[,RR] <- tmp$es
vs1_list_tmp[,RR] <- tmp$vs1
vs1w_list_tmp[,RR] <- tmp$vs1w
vs0_list_tmp[,RR] <- tmp$vs0
vs0w_list_tmp[,RR] <- tmp$vs0w
param_list_temp[,RR] <- mvd$params
end_time <- Sys.time()
timing_list_tmp[RR] <- end_time - start_time
}
if (method == "Clayton") {
crps_list$clayton[rr,,] <- apply(crps_list_tmp, c(1,2), mean)
es_list$clayton[rr, ] <- apply(es_list_tmp, 1, mean)
vs1_list$clayton[rr, ] <- apply(vs1_list_tmp, 1, mean)
vs1w_list$clayton[rr, ] <- apply(vs1w_list_tmp, 1, mean)
vs0_list$clayton[rr, ] <- apply(vs0_list_tmp, 1, mean)
vs0w_list$clayton[rr, ] <- apply(vs0w_list_tmp, 1, mean)
param_list$clayton[rr, ] <- apply(param_list_temp, 1, mean)
timing_list$clayton[rr] <- apply(timing_list_tmp, 1, mean)
} else if (method == "Frank") {
crps_list$frank[rr,,] <- apply(crps_list_tmp, c(1,2), mean)
es_list$frank[rr, ] <- apply(es_list_tmp, 1, mean)
vs1_list$frank[rr, ] <- apply(vs1_list_tmp, 1, mean)
vs1w_list$frank[rr, ] <- apply(vs1w_list_tmp, 1, mean)
vs0_list$frank[rr, ] <- apply(vs0_list_tmp, 1, mean)
vs0w_list$frank[rr, ] <- apply(vs0w_list_tmp, 1, mean)
param_list$frank[rr, ] <- apply(param_list_temp, 1, mean)
timing_list$frank[rr] <- apply(timing_list_tmp, 1, mean)
} else if (method == "Gumbel") {
crps_list$gumbel[rr,,] <- apply(crps_list_tmp, c(1,2), mean)
es_list$gumbel[rr, ] <- apply(es_list_tmp, 1, mean)
vs1_list$gumbel[rr, ] <- apply(vs1_list_tmp, 1, mean)
vs1w_list$gumbel[rr, ] <- apply(vs1w_list_tmp, 1, mean)
vs0_list$gumbel[rr, ] <- apply(vs0_list_tmp, 1, mean)
vs0w_list$gumbel[rr, ] <- apply(vs0w_list_tmp, 1, mean)
param_list$gumbel[rr, ] <- apply(param_list_temp, 1, mean)
timing_list$gumbel[rr] <- apply(timing_list_tmp, 1, mean)
}
}
# end loop over Monte Carlo repetitions
}
# return results, as a huge list
out <- list("crps_list" = crps_list, "es_list" = es_list, "vs1_list" = vs1_list,
"vs1w_list" = vs1w_list, "vs0_list" = vs0_list, "vs0w_list" = vs0w_list, "param_list" = param_list, "timing_list" = timing_list)
return(out)
}
run_wrapper <- function(runID){
# sink(file = paste0(Rout_dir, "_model_",modelSetting,"_ID_", runID, ".Rout"))
par_values <- as.numeric(input_par[ID, ])
res <- run_setting1(obsmodel = observationsModel, fcmodel = forecastModel, nout = evalDays, ninit = trainingDays,
nmembers = ensembleMembers, timeWindow = timeWindow,
MCrep = MC_reps, rand_rep = randomRepetitions,
progress_ind = TRUE, compute_crps = TRUE,
theta0 = input_par$theta0[runID],
theta = input_par$theta[runID],
copula = input_par$copula[runID],
d = input_par$d[runID])
savename <- paste0(Rdata_dir,"_setting_",setting, "_model_",modelSetting,"_ID_", runID, ".Rdata")
save(res, input_par, file = savename)
# sink()
}
# Run the simulation for all parameter coefficients with a unique ID
for (ID in 1:dim(input_par)[1]) {
closeAllConnections()
print(ID)
run_wrapper(runID = ID)
}
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
pnorm(1)
qnorm(1)
pnorm(0)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
qnorm(pnorm(10.01653388 ), mean = 0.06038412 , sd = 1.14826607)
pnorm(10.01653388 )
qnorm(pnorm(10.01653388 ))
pnorm(10, lower.tail=F)
pnorm(10, log=T)
qnorm(pnorm(10, log=T), log=T)
qnorm(pnorm(10.01653388 , log=T), log=T)
qnorm(pnorm(0 , log=T), log=T)
qnorm(pnorm(-10 , log=T), log=T)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
n
n
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
View(fc)
fc[["ensfc_init"]]
mvpp(method = method, ensfc = fc$ensfc, ensfc_init = fc$ensfc_init,
obs = obs$obs, obs_init = obs$obs_init, postproc_out = pp_out, timeWindow = timeWindow)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
?fitCopula
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
obsCDF
fitCopula(frankCopula(dim = d), data = obsCDF, method="itau", start = 1,optim.control = list(maxit=10))
fitCopula(frankCopula(dim = 3), data = obsCDF, method="itau", start = 1,optim.control = list(maxit=10))
fitCopula(frankCopula(dim = 3), data = obsCDF, method="mpl", start = 1,optim.control = list(maxit=10))
fitCopula(frankCopula(dim = 3), data = obsCDF, method="mpl", start = 1,optim.control = list(maxit=10), optim.method = "BFGS")
fitCopula(frankCopula(dim = 3), data = obsCDF, method="mpl", start = 1,optim.control = list(maxit=1000), optim.method = "BFGS")
fitCopula(frankCopula(dim = 3), data = obsCDF, method="mpl", start = 1,optim.control = list(maxit=10), optim.method = "BFGS")
fitCopula(frankCopula(dim = 3), data = obsCDF, method="mpl", start = 1,optim.control = list(maxit=1000), optim.method = "BFGS")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
obsCDF
fitCopula(frankCopula(dim = 3), data = obsCDF, method="mpl", start = 1,optim.control = list(maxit=1000), optim.method = "BFGS")
fitCopula(frankCopula(dim = d), data = obsCDF, method="mpl", start = 1,optim.control = list(maxit=1000))
fitCopula(frankCopula(dim = 3), data = obsCDF, method="mpl", start = 1,optim.control = list(maxit=1000))
fitCopula(frankCopula(dim = 3), data = obsCDF, method="itau", start = 1,optim.control = list(maxit=10), optim.method = "BFGS")
fitCopula(frankCopula(dim = 3), data = obsCDF, method="itau", start = 1,optim.control = list(maxit=1000), optim.method = "BFGS")
fitCopula(frankCopula(dim = 3), data = obsCDF, method="itau", start = 1,optim.control = list(maxit=1000), optim.method = "BFGS")
fitCopula(frankCopula(dim = 3), data = obsCDF, method="itau.mpl", start = 1,optim.control = list(maxit=1000))
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
warnings()
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
db
rMvdc(50, mvDistribution)
rMvdc(50, db)
rMvdc(50, frankCopula(dim = 3, param=1000))
rMvdc(50, frankCopula(dim = 3, param=1000)@copula)
mvdc(copula=frankCopula(dim=1,param=1000), margins=rep("norm", 1),
paramMargins=list(mean = 0, sd = 1))
mvdc(copula=frankCopula(dim=3,param=1000), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1)))
rMvdc(50, mvdc(copula=frankCopula(dim=3,param=1000), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=frankCopula(dim=3,param=100), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=frankCopula(dim=3,param=500), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=frankCopula(dim=3,param=750), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=frankCopula(dim=3,param=600), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=frankCopula(dim=3,param=700), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=frankCopula(dim=3,param=710), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=frankCopula(dim=3,param=730), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=frankCopula(dim=3,param=740), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=frankCopula(dim=3,param=750), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=frankCopula(dim=3,param=749), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=frankCopula(dim=3,param=749), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=gumbel(dim=3,param=749), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=gumbelCopula(dim=3, param=740), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=gumbelCopula(dim=3, param=700), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=gumbelCopula(dim=3, param=700), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=gumbelCopula(dim=3, param=700), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=gumbelCopula(dim=3, param=500), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=gumbelCopula(dim=3, param=300), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=gumbelCopula(dim=3, param=200), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=gumbelCopula(dim=3, param=100), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=gumbelCopula(dim=3, param=100), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
rMvdc(50, mvdc(copula=gumbelCopula(dim=3, param=100), margins=rep("norm", 3),
paramMargins=list(list(mean = 0, sd = 1),list(mean = 0, sd = 1),list(mean = 0, sd = 1))))
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/./sourceArchimedean/mvpp_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/Settings.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/Settings.R")
View(input_par)
input_par[1]
input_par[,1]
dim(input_par)
rownames(input_par) <- 1:dim(input_par)[1]
View(input_par)
input_par[rownames(input_par)==1]
rownames(input_par) <- paste0("Sim_",as.character(1:dim(input_par)[1]))
input_par[rownames(input_par)==1]
input_par[rownames(input_par)=="Sim_1"]
input_par[rownames(input_par)=="Sim_1",]
getModelSettings(3)
input_par[rownames(input_par)==1,]
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
dim = c(MCrep, nout, d)
dim = c(5, nout, d)
dim = c(5, 4, d)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
c(input_par[rownames(input_par) == 1])
c(input_par[rownames(input_par) == 1,])
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
c(input_par[rownames(input_par) == 1,])
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/sourceArchimedean/generate_observations_arch.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
params = list(min=0, max=1)
str(c(n=100, min=0, max=1))
str(list(n=100, min=0, max=1))
str(c(list(n=100),params))
str(c(n=100,params))
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
ninit
mcrep
MCrep
fcmodel
nmembers
d
...
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
nout
nmembers
d
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
tau
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
debugSource("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/run_setting_archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output/DM_TestStatistic_computation_Archimedean - Copy.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output/DM_TestStatistic_computation_Archimedean - Copy.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
load("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/Data/TestStatistic/TestStatistic_Archimedean_setting_1_obsmodel_3_fcmodel_3.Rdata")
View(dfmc)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
bquote(Energey~Score,~sigma==sqrt(5))
bquote(Energey~Score,~sigma==sqrt[(5)]5])
bquote(Energey~Score,~sigma==sqrt[5])
bquote(Energey~Score,~sigma==)
bquote(Energey~Score,~sigma==)
bquote(Energey~Score,~sigma)
bquote(Energey~Score,~)
bquote(Energey~Score,)
bquote(Energey Score, sigma == sqrt(5))
bquote(Energey Score, sigm)
bquote(Energey Score)
bquote("Energey Score," ~ sigma == sqrt[5])
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/multivariate_Archimedean.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ArchimedeanPlots.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/ArchimedeanPlots.R")
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/TauScatterPlot.R")
plotTau <- function(fitCopula) {
p1 <- ggplot(dfplot, aes_string(x="tau", y=fitCopula))
for (i in 1:length(tauValues)) {
p1 <- p1 +geom_boxplot(data=subset(dfplot, tau == tauValues[i]), width=0.5/length(tauValues))
}
p1 <- p1 + geom_abline(intercept = 0, slope = 1, color="grey",
linetype="dashed", size=0.5)
p1 <- p1 + facet_grid(cols = vars(input_cop),
labeller = label_bquote(cols = observations: .(as.character(input_cop))))
p1 <- p1 + scale_x_continuous(breaks=seq(0,1,0.1)) + scale_y_continuous(breaks=seq(0,1,0.2))
p1 <- p1 + theme_bw()
p1 <- p1 + xlab(bquote(tau[input])) + ylab(bquote(tau[output])) + coord_fixed(ratio=1)
if (fitCopula == "claytonTau") {
copula <- "Clayton"
} else if (fitCopula == "frankTau") {
copula <- "Frank"
} else if (fitCopula == "gumbelTau") {
copula <- "Gumbel"
} else {
stop("No copula")
}
p1 <- p1 + ggtitle(bquote("Input versus fitted" ~ tau ~ "for" ~ .(copula) ~ " fitting")) +
theme(plot.title = element_text(hjust = 0.5))
return(p1)
}
plot_folder <- paste0("../Data/Plots/Arch_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,"/")
dir.create(file.path(plot_folder), showWarnings = FALSE)
plotWidth <- 9
plotHeight <- 6
res <- 400
for (fitCopula in c("claytonTau", "frankTau", "gumbelTau")){
fileName <- paste0("Arch_",fitCopula,"_setting_", setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png")
p1 <- plotTau(fitCopula)
ggsave(
paste0(plot_folder, fileName),
p1,
width = plotWidth,
height = plotHeight,
dpi = res
)
}
plotTau <- function(fitCopula) {
p1 <- ggplot(dfplot, aes_string(x="tau", y=fitCopula))
for (i in 1:length(tauValues)) {
p1 <- p1 +geom_boxplot(data=subset(dfplot, tau == tauValues[i]), width=0.5/length(tauValues))
}
p1 <- p1 + geom_abline(intercept = 0, slope = 1, color="grey",
linetype="dashed", size=0.5)
p1 <- p1 + facet_grid(cols = vars(input_cop),
labeller = label_bquote(cols = observations: .(as.character(input_cop))))
p1 <- p1 + scale_x_continuous(breaks=seq(0,1,0.2)) + scale_y_continuous(breaks=seq(0,1,0.2))
p1 <- p1 + theme_bw()
p1 <- p1 + xlab(bquote(tau[input])) + ylab(bquote(tau[output])) + coord_fixed(ratio=1)
if (fitCopula == "claytonTau") {
copula <- "Clayton"
} else if (fitCopula == "frankTau") {
copula <- "Frank"
} else if (fitCopula == "gumbelTau") {
copula <- "Gumbel"
} else {
stop("No copula")
}
p1 <- p1 + ggtitle(bquote("Input versus fitted" ~ tau ~ "for" ~ .(copula) ~ " fitting")) +
theme(plot.title = element_text(hjust = 0.5))
return(p1)
}
plot_folder <- paste0("../Data/Plots/Arch_setting_",setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,"/")
dir.create(file.path(plot_folder), showWarnings = FALSE)
plotWidth <- 12
plotHeight <- 6
res <- 400
for (fitCopula in c("claytonTau", "frankTau", "gumbelTau")){
fileName <- paste0("Arch_",fitCopula,"_setting_", setting, "_obsmodel_",observationsModel,"_fcmodel_",forecastModel,".png")
p1 <- plotTau(fitCopula)
ggsave(
paste0(plot_folder, fileName),
p1,
width = plotWidth,
height = plotHeight,
dpi = res
)
}
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures/TauScatterPlot.R")
