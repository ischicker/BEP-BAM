h = 1, power = 1), silent = TRUE)
if(class(tryDM) != "try-error"){
tmp <- tmp_DM$statistic
} else{
tmp <- 0
}
dm_teststat_vec[MC_rep] <- tmp
}
}
dfmc$value[ind] <- dm_teststat_vec
}
}
}
save(dfmc, file = "../Data/TestStatistic/testStatistic_Archimedean_1.Rdata")
# code to compute test statistics of DM tests
# results are saved in a specific data frame format to simplify plotting later on
rm(list=ls())
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output")
# parameters
# Should be the same as in run_setting?.R
# parameters to run
# Dependence parameter between weather variables for observations
input_theta0 <- c(5, 10)
# Dependence parameter between weather variables for ensemble forecasts
input_theta <- c(5, 10)
# Copula type
input_copula <- c("Frank","Gumbel", "Clayton")
# Dimension
input_d <- 3
# Put the parameters in a grid
input_par <- expand.grid(input_theta0, input_theta, input_copula, input_d)
names(input_par) <- c("theta0", "theta", "copula",  "d")
# Number of Monte Carlo repetitions
MC_reps <- 10
# Parameter that influences reliability of methods such as Ssh and ECC.S
randomRepetitions <- 5
df_raw <- data.frame(input_par)
df_raw$simID <- 1:nrow(df_raw)
flist <- list.files("../Data/Rdata/")
existing <- as.numeric(sapply(flist, FUN = function(x) as.numeric(strsplit(strsplit(x, "_Archimedean_")[[1]][2], ".Rdata"))))
df <- df_raw[which(is.element(df_raw$simID, existing)),]
load("../Data/Rdata/res_Archimedean.Rdata")
input_models <- names(res$es_list)
input_scores <- names(res)
df_use <- as.data.frame(df[1,])
df_use$model <- as.character("a")
df_use$score <- as.character("a")
model_score_grid <- expand.grid(input_models, input_scores)
# Produces df of the form
#         rho0  eps   sigma   rho   d   simID   model   score
#   1     0.1   0     0.5     0.1   3   1       ens     crps_list
for(i in 1:nrow(df)){
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),] <- df[i,]
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$model <- as.character(model_score_grid$Var1)
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$score <- as.character(model_score_grid$Var2)
}
# Makes a copy of df_use for each MC_rep
dfmc <- data.frame(cbind(zoo::coredata(df_use)[rep(seq(nrow(df_use)),MC_reps),]))
dfmc$value <- NA
head(dfmc)
library(forecast) # for DM test function
for(filename in flist){
load(paste0("../Data/Rdata/", filename))
ID <- as.numeric(as.numeric(strsplit(strsplit(filename, "Archimedeanres_setting_arch")[[1]][2], ".Rdata")))
print(which(flist == filename))
for(this_model in input_models){
for(this_score in input_scores){
ind <- which(dfmc$simID == ID & dfmc$model == this_model & dfmc$score == this_score)
# deal with CRPS specifically (use only first dimension, not all 5 recorded ones)
if(this_score == "crps_list"){
dm_teststat_vec <- rep(NA, MC_reps)
for(MC_rep in 1:MC_reps){
tmp <- NA
tryDM <- try(tmp_DM <- dm.test(e1 = res[[which(input_scores == this_score)]][[which(input_models == this_model)]][,,1][MC_rep,],
e2 = res[[which(input_scores == this_score)]][[which(input_models == "ecc.q")]][,,1][MC_rep,],
h = 1, power = 1), silent = TRUE)
if(class(tryDM) != "try-error"){
tmp <- tmp_DM$statistic
} else{
tmp <- 0
}
dm_teststat_vec[MC_rep] <- tmp
}
} else{
dm_teststat_vec <- rep(NA, MC_reps)
for(MC_rep in 1:MC_reps){
tmp <- NA
tryDM <- try(tmp_DM <- dm.test(e1 = res[[which(input_scores == this_score)]][[which(input_models == this_model)]][MC_rep,],
e2 = res[[which(input_scores == this_score)]][[which(input_models == "ecc.q")]][MC_rep,],
h = 1, power = 1), silent = TRUE)
if(class(tryDM) != "try-error"){
tmp <- tmp_DM$statistic
} else{
tmp <- 0
}
dm_teststat_vec[MC_rep] <- tmp
}
}
dfmc$value[ind] <- dm_teststat_vec
}
}
}
save(dfmc, file = "../Data/TestStatistic/testStatistic_Archimedean_1.Rdata")
# code to compute test statistics of DM tests
# results are saved in a specific data frame format to simplify plotting later on
rm(list=ls())
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output")
# parameters
# Should be the same as in run_setting?.R
# parameters to run
# Dependence parameter between weather variables for observations
input_theta0 <- c(5, 10)
# Dependence parameter between weather variables for ensemble forecasts
input_theta <- c(5, 10)
# Copula type
input_copula <- c("Frank","Gumbel", "Clayton")
# Dimension
input_d <- 3
# Put the parameters in a grid
input_par <- expand.grid(input_theta0, input_theta, input_copula, input_d)
names(input_par) <- c("theta0", "theta", "copula",  "d")
# Number of Monte Carlo repetitions
MC_reps <- 10
# Parameter that influences reliability of methods such as Ssh and ECC.S
randomRepetitions <- 5
df_raw <- data.frame(input_par)
df_raw$simID <- 1:nrow(df_raw)
flist <- list.files("../Data/Rdata/")
existing <- as.numeric(sapply(flist, FUN = function(x) as.numeric(strsplit(strsplit(x, "_Archimedean_")[[1]][2], ".Rdata"))))
df <- df_raw[which(is.element(df_raw$simID, existing)),]
load("../Data/Rdata/Archimedeanres_setting_arch1.Rdata")
input_models <- names(res$es_list)
input_scores <- names(res)
df_use <- as.data.frame(df[1,])
df_use$model <- as.character("a")
df_use$score <- as.character("a")
model_score_grid <- expand.grid(input_models, input_scores)
# Produces df of the form
#         rho0  eps   sigma   rho   d   simID   model   score
#   1     0.1   0     0.5     0.1   3   1       ens     crps_list
for(i in 1:nrow(df)){
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),] <- df[i,]
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$model <- as.character(model_score_grid$Var1)
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$score <- as.character(model_score_grid$Var2)
}
# Makes a copy of df_use for each MC_rep
dfmc <- data.frame(cbind(zoo::coredata(df_use)[rep(seq(nrow(df_use)),MC_reps),]))
dfmc$value <- NA
head(dfmc)
library(forecast) # for DM test function
for(filename in flist){
load(paste0("../Data/Rdata/", filename))
ID <- as.numeric(as.numeric(strsplit(strsplit(filename, "Archimedeanres_setting_arch")[[1]][2], ".Rdata")))
print(which(flist == filename))
for(this_model in input_models){
for(this_score in input_scores){
ind <- which(dfmc$simID == ID & dfmc$model == this_model & dfmc$score == this_score)
# deal with CRPS specifically (use only first dimension, not all 5 recorded ones)
if(this_score == "crps_list"){
dm_teststat_vec <- rep(NA, MC_reps)
for(MC_rep in 1:MC_reps){
tmp <- NA
tryDM <- try(tmp_DM <- dm.test(e1 = res[[which(input_scores == this_score)]][[which(input_models == this_model)]][,,1][MC_rep,],
e2 = res[[which(input_scores == this_score)]][[which(input_models == "ecc.q")]][,,1][MC_rep,],
h = 1, power = 1), silent = TRUE)
if(class(tryDM) != "try-error"){
tmp <- tmp_DM$statistic
} else{
tmp <- 0
}
dm_teststat_vec[MC_rep] <- tmp
}
} else{
dm_teststat_vec <- rep(NA, MC_reps)
for(MC_rep in 1:MC_reps){
tmp <- NA
tryDM <- try(tmp_DM <- dm.test(e1 = res[[which(input_scores == this_score)]][[which(input_models == this_model)]][MC_rep,],
e2 = res[[which(input_scores == this_score)]][[which(input_models == "ecc.q")]][MC_rep,],
h = 1, power = 1), silent = TRUE)
if(class(tryDM) != "try-error"){
tmp <- tmp_DM$statistic
} else{
tmp <- 0
}
dm_teststat_vec[MC_rep] <- tmp
}
}
dfmc$value[ind] <- dm_teststat_vec
}
}
}
save(dfmc, file = "../Data/TestStatistic/testStatistic_Archimedean_1.Rdata")
load("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/Data/TestStatistic/testStatistic_Archimedean_1.Rdata")
View(dfmc)
View(df_raw)
View(df_use)
View(df)
rm(list=ls())
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output")
# parameters
# Should be the same as in run_setting?.R
# parameters to run
# Dependence parameter between weather variables for observations
input_theta0 <- c(5, 10)
# Dependence parameter between weather variables for ensemble forecasts
input_theta <- c(5, 10)
# Copula type
input_copula <- c("Frank","Gumbel", "Clayton")
# Dimension
input_d <- 3
# Put the parameters in a grid
input_par <- expand.grid(input_theta0, input_theta, input_copula, input_d)
names(input_par) <- c("theta0", "theta", "copula",  "d")
# Number of Monte Carlo repetitions
MC_reps <- 10
# Parameter that influences reliability of methods such as Ssh and ECC.S
randomRepetitions <- 5
df_raw <- data.frame(input_par)
df_raw$simID <- 1:nrow(df_raw)
flist <- list.files("../Data/Rdata/")
existing <- as.numeric(sapply(flist, FUN = function(x) as.numeric(strsplit(strsplit(x, "_Archimedean_")[[1]][2], ".Rdata"))))
df <- df_raw[which(is.element(df_raw$simID, existing)),]
View(df_raw)
# code to compute test statistics of DM tests
# results are saved in a specific data frame format to simplify plotting later on
rm(list=ls())
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output")
# parameters
# Should be the same as in run_setting?.R
# parameters to run
# Dependence parameter between weather variables for observations
input_theta0 <- c(5, 10)
# Dependence parameter between weather variables for ensemble forecasts
input_theta <- c(5, 10)
# Copula type
input_copula <- c("Frank","Gumbel", "Clayton")
# Dimension
input_d <- 3
# Put the parameters in a grid
input_par <- expand.grid(input_theta0, input_theta, input_copula, input_d)
names(input_par) <- c("theta0", "theta", "copula",  "d")
# Number of Monte Carlo repetitions
MC_reps <- 10
# Parameter that influences reliability of methods such as Ssh and ECC.S
randomRepetitions <- 5
df_raw <- data.frame(input_par)
df_raw$simID <- 1:nrow(df_raw)
flist <- list.files("../Data/Rdata/")
existing <- as.numeric(sapply(flist, FUN = function(x) as.numeric(strsplit(strsplit(x, "Archimedeanres_setting_arch")[[1]][2], ".Rdata"))))
df <- df_raw[which(is.element(df_raw$simID, existing)),]
# code to compute test statistics of DM tests
# results are saved in a specific data frame format to simplify plotting later on
rm(list=ls())
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/processing code for simulation output")
# parameters
# Should be the same as in run_setting?.R
# parameters to run
# Dependence parameter between weather variables for observations
input_theta0 <- c(5, 10)
# Dependence parameter between weather variables for ensemble forecasts
input_theta <- c(5, 10)
# Copula type
input_copula <- c("Frank","Gumbel", "Clayton")
# Dimension
input_d <- 3
# Put the parameters in a grid
input_par <- expand.grid(input_theta0, input_theta, input_copula, input_d)
names(input_par) <- c("theta0", "theta", "copula",  "d")
# Number of Monte Carlo repetitions
MC_reps <- 10
# Parameter that influences reliability of methods such as Ssh and ECC.S
randomRepetitions <- 5
df_raw <- data.frame(input_par)
df_raw$simID <- 1:nrow(df_raw)
flist <- list.files("../Data/Rdata/")
existing <- as.numeric(sapply(flist, FUN = function(x) as.numeric(strsplit(strsplit(x, "Archimedeanres_setting_arch")[[1]][2], ".Rdata"))))
df <- df_raw[which(is.element(df_raw$simID, existing)),]
load("../Data/Rdata/Archimedeanres_setting_arch1.Rdata")
input_models <- names(res$es_list)
input_scores <- names(res)
df_use <- as.data.frame(df[1,])
df_use$model <- as.character("a")
df_use$score <- as.character("a")
model_score_grid <- expand.grid(input_models, input_scores)
# Produces df of the form
#         rho0  eps   sigma   rho   d   simID   model   score
#   1     0.1   0     0.5     0.1   3   1       ens     crps_list
for(i in 1:nrow(df)){
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),] <- df[i,]
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$model <- as.character(model_score_grid$Var1)
df_use[((i-1)*nrow(model_score_grid)+1):(i*nrow(model_score_grid)),]$score <- as.character(model_score_grid$Var2)
}
# Makes a copy of df_use for each MC_rep
dfmc <- data.frame(cbind(zoo::coredata(df_use)[rep(seq(nrow(df_use)),MC_reps),]))
dfmc$value <- NA
head(dfmc)
library(forecast) # for DM test function
for(filename in flist){
load(paste0("../Data/Rdata/", filename))
ID <- as.numeric(as.numeric(strsplit(strsplit(filename, "Archimedeanres_setting_arch")[[1]][2], ".Rdata")))
print(which(flist == filename))
for(this_model in input_models){
for(this_score in input_scores){
ind <- which(dfmc$simID == ID & dfmc$model == this_model & dfmc$score == this_score)
# deal with CRPS specifically (use only first dimension, not all 5 recorded ones)
if(this_score == "crps_list"){
dm_teststat_vec <- rep(NA, MC_reps)
for(MC_rep in 1:MC_reps){
tmp <- NA
tryDM <- try(tmp_DM <- dm.test(e1 = res[[which(input_scores == this_score)]][[which(input_models == this_model)]][,,1][MC_rep,],
e2 = res[[which(input_scores == this_score)]][[which(input_models == "ecc.q")]][,,1][MC_rep,],
h = 1, power = 1), silent = TRUE)
if(class(tryDM) != "try-error"){
tmp <- tmp_DM$statistic
} else{
tmp <- 0
}
dm_teststat_vec[MC_rep] <- tmp
}
} else{
dm_teststat_vec <- rep(NA, MC_reps)
for(MC_rep in 1:MC_reps){
tmp <- NA
tryDM <- try(tmp_DM <- dm.test(e1 = res[[which(input_scores == this_score)]][[which(input_models == this_model)]][MC_rep,],
e2 = res[[which(input_scores == this_score)]][[which(input_models == "ecc.q")]][MC_rep,],
h = 1, power = 1), silent = TRUE)
if(class(tryDM) != "try-error"){
tmp <- tmp_DM$statistic
} else{
tmp <- 0
}
dm_teststat_vec[MC_rep] <- tmp
}
}
dfmc$value[ind] <- dm_teststat_vec
}
}
}
save(dfmc, file = "../Data/TestStatistic/testStatistic_Archimedean_1.Rdata")
View(dfmc)
rm(list=ls())
library(ggplot2)
library(gridExtra)
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures")
load("../Data/TestStatistic/testStatistic_Archimedean_1.Rdata")
df <- dfmc; rm(dfmc)
names(df)
df1 <- subset(df)
input_theta0 <- c(5, 10)
input_theta <- c(5, 10)
input_copula <- c("Frank","Gumbel", "Clayton")
input_d <- 3
# # Put the parameters in a grid
# input_par <- expand.grid(input_theta0, input_theta, input_copula, input_d)
# names(input_par) <- c("theta0", "theta", "copula",  "d")
df1$value <- (-1)*df1$value
df0 <- df1
input_scores <- unique(df1$score)
plot_folder <- "../Data/Plots/"
# drop model == "ens"
df1_save <- df1
df1 <- subset(df1_save, model != "ens")
# also drop EMOS.Q
df2 <- subset(df1, model != "emos.q")
mypal <- colorspace::rainbow_hcl(5)
mypal_use <- c("decc.q" = mypal[1],
"ecc.q" = mypal[2],
"ecc.s" = mypal[3],
"gca" = mypal[4],
"ssh" = mypal[5])
df2$model <- factor(df2$model, levels = c("decc.q", "ecc.q", "ecc.s", "gca", "ssh"))
model_vec <- c("dECC", "ECC-Q", "ECC-S", "GCA", "SSh")
## ES
this_score <- "es_list"
dfplot <- subset(df2, score == this_score)
dfplot$equalThetas <- (dfplot$theta0 == dfplot$theta)
p1 <- ggplot(dfplot, aes(model, value, colour = model)) +
geom_rect(data = subset(dfplot, equalRhos == 1), color = "black", size = 2, fill = NA, xmin = -Inf,xmax = Inf, ymin = -Inf,ymax = Inf)
p1 <- p1 + geom_rect(mapping=aes(xmin=-Inf, xmax=Inf, ymin=qnorm(0.025), ymax=qnorm(0.975)), fill = "gray75", color="gray75", alpha=0.25)
p1 <- p1 + geom_boxplot(outlier.shape = NA) + geom_hline(yintercept = 0, linetype = "dashed", color = "gray25")
p1 <- p1 + facet_grid(rows = vars(theta), cols = vars(theta0),
labeller = label_bquote(rows = theta==.(theta),
cols = theta[0]==.(theta0)))
scval <- strsplit(this_score, split = "_")[[1]][1]
if(scval == "es"){
p1 <- p1 + ggtitle(bquote(list("Energy Score")))
}
if(scval == "vs1"){
p1 <- p1 + ggtitle(bquote(list("Variogram Score")))
}
p1 <- p1 + theme_bw() + theme(legend.position = "bottom")
p1 <- p1 + xlab("Model") + ylab("DM test statistic")
p1 <- p1 + scale_color_manual(values = mypal_use, name = "Model", label = model_vec)
p1 <- p1 + scale_x_discrete(label = model_vec)
p1save <- p1
library(gridExtra)
pdf(paste0(plot_folder, "Arch_ES.pdf"), width = 15, height = 24, pointsize = 11)
grid.arrange(p1save, ncol = 1)
dev.off()
## VS
this_score <- "vs1_list"
dfplot <- subset(df2, score == this_score)
dfplot$equalThetas <- (dfplot$theta0 == dfplot$theta)
p1 <- ggplot(dfplot, aes(model, value, colour = model)) +
geom_rect(data = subset(dfplot, equalRhos == 1), color = "black", size = 2, fill = NA, xmin = -Inf,xmax = Inf, ymin = -Inf,ymax = Inf)
p1 <- p1 + geom_rect(mapping=aes(xmin=-Inf, xmax=Inf, ymin=qnorm(0.025), ymax=qnorm(0.975)), fill = "gray75", color="gray75", alpha=0.25)
p1 <- p1 + geom_boxplot(outlier.shape = NA) + geom_hline(yintercept = 0, linetype = "dashed", color = "gray25")
p1 <- p1 + facet_grid(rows = vars(theta), cols = vars(theta0),
labeller = label_bquote(rows = theta==.(theta),
cols = theta[0]==.(theta0)))
scval <- strsplit(this_score, split = "_")[[1]][1]
if(scval == "es"){
p1 <- p1 + ggtitle(bquote(list("Energy Score")))
}
if(scval == "vs1"){
p1 <- p1 + ggtitle(bquote(list("Variogram Score")))
}
p1 <- p1 + theme_bw() + theme(legend.position = "bottom")
p1 <- p1 + xlab("Model") + ylab("DM test statistic")
p1 <- p1 + scale_color_manual(values = mypal_use, name = "Model", label = model_vec)
p1 <- p1 + scale_x_discrete(label = model_vec)
p1save <- p1
library(gridExtra)
pdf(paste0(plot_folder, "Arch_VS.pdf"), width = 15, height = 24, pointsize = 11)
grid.arrange(p1save, ncol = 1)
dev.off()
rm(list=ls())
library(ggplot2)
library(gridExtra)
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/reproducing results and figures")
load("../Data/TestStatistic/testStatistic_Archimedean_1.Rdata")
df <- dfmc; rm(dfmc)
names(df)
df1 <- subset(df)
input_theta0 <- c(5, 10)
input_theta <- c(5, 10)
input_copula <- c("Frank","Gumbel", "Clayton")
input_d <- 3
# # Put the parameters in a grid
# input_par <- expand.grid(input_theta0, input_theta, input_copula, input_d)
# names(input_par) <- c("theta0", "theta", "copula",  "d")
df1$value <- (-1)*df1$value
df0 <- df1
input_scores <- unique(df1$score)
plot_folder <- "../Data/Plots/"
# drop model == "ens"
df1_save <- df1
df1 <- subset(df1_save, model != "ens")
# also drop EMOS.Q
df2 <- subset(df1, model != "emos.q")
mypal <- colorspace::rainbow_hcl(5)
mypal_use <- c("decc.q" = mypal[1],
"ecc.q" = mypal[2],
"ecc.s" = mypal[3],
"gca" = mypal[4],
"ssh" = mypal[5])
df2$model <- factor(df2$model, levels = c("decc.q", "ecc.q", "ecc.s", "gca", "ssh"))
model_vec <- c("dECC", "ECC-Q", "ECC-S", "GCA", "SSh")
## ES
this_score <- "es_list"
dfplot <- subset(df2, score == this_score)
dfplot$equalThetas <- (dfplot$theta0 == dfplot$theta)
p1 <- ggplot(dfplot, aes(model, value, colour = model)) +
geom_rect(data = subset(dfplot, equalThetas == 1), color = "black", size = 2, fill = NA, xmin = -Inf,xmax = Inf, ymin = -Inf,ymax = Inf)
p1 <- p1 + geom_rect(mapping=aes(xmin=-Inf, xmax=Inf, ymin=qnorm(0.025), ymax=qnorm(0.975)), fill = "gray75", color="gray75", alpha=0.25)
p1 <- p1 + geom_boxplot(outlier.shape = NA) + geom_hline(yintercept = 0, linetype = "dashed", color = "gray25")
p1 <- p1 + facet_grid(rows = vars(theta), cols = vars(theta0),
labeller = label_bquote(rows = theta==.(theta),
cols = theta[0]==.(theta0)))
scval <- strsplit(this_score, split = "_")[[1]][1]
if(scval == "es"){
p1 <- p1 + ggtitle(bquote(list("Energy Score")))
}
if(scval == "vs1"){
p1 <- p1 + ggtitle(bquote(list("Variogram Score")))
}
p1 <- p1 + theme_bw() + theme(legend.position = "bottom")
p1 <- p1 + xlab("Model") + ylab("DM test statistic")
p1 <- p1 + scale_color_manual(values = mypal_use, name = "Model", label = model_vec)
p1 <- p1 + scale_x_discrete(label = model_vec)
p1save <- p1
library(gridExtra)
pdf(paste0(plot_folder, "Arch_ES.pdf"), width = 15, height = 24, pointsize = 11)
grid.arrange(p1save, ncol = 1)
dev.off()
## VS
this_score <- "vs1_list"
dfplot <- subset(df2, score == this_score)
dfplot$equalThetas <- (dfplot$theta0 == dfplot$theta)
p1 <- ggplot(dfplot, aes(model, value, colour = model)) +
geom_rect(data = subset(dfplot, equalThetas == 1), color = "black", size = 2, fill = NA, xmin = -Inf,xmax = Inf, ymin = -Inf,ymax = Inf)
p1 <- p1 + geom_rect(mapping=aes(xmin=-Inf, xmax=Inf, ymin=qnorm(0.025), ymax=qnorm(0.975)), fill = "gray75", color="gray75", alpha=0.25)
p1 <- p1 + geom_boxplot(outlier.shape = NA) + geom_hline(yintercept = 0, linetype = "dashed", color = "gray25")
p1 <- p1 + facet_grid(rows = vars(theta), cols = vars(theta0),
labeller = label_bquote(rows = theta==.(theta),
cols = theta[0]==.(theta0)))
scval <- strsplit(this_score, split = "_")[[1]][1]
if(scval == "es"){
p1 <- p1 + ggtitle(bquote(list("Energy Score")))
}
if(scval == "vs1"){
p1 <- p1 + ggtitle(bquote(list("Variogram Score")))
}
p1 <- p1 + theme_bw() + theme(legend.position = "bottom")
p1 <- p1 + xlab("Model") + ylab("DM test statistic")
p1 <- p1 + scale_color_manual(values = mypal_use, name = "Model", label = model_vec)
p1 <- p1 + scale_x_discrete(label = model_vec)
p1save <- p1
library(gridExtra)
pdf(paste0(plot_folder, "Arch_VS.pdf"), width = 15, height = 24, pointsize = 11)
grid.arrange(p1save, ncol = 1)
dev.off()
