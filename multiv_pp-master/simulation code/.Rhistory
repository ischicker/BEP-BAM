for (row in length(emos.result$obs)) {
values <- unlist(unname(emos.result[row,][c("ens_mu", "ens_sd")]))
day <- match(emos.result[row,]$td, days)
pp_out[day,match(station,stations),match(station, stations)] <- values
}
}
.GlobalEnv$test <- pp_out
end_time <- Sys.time()
timing_list$uvpp[rr] <- end_time - start_time
}
run_processing(data1, 3, TRUE, TRUE)
run_processing <- function(data, timeWindow, progress_ind = FALSE, compute_crps, ...){
# Stations and days from the data
stations <- unique(data$stat)
days <- sort(unique(data$td))
nout <- length(days)
# 1 weather variable over 1 lead time with d stations
d <- length(stations)
# Ensemble members
m <- sum(grepl("laef", names(data)))
ensembleMembers <- sapply(1:m, FUN = function(x) paste0("laef", x))
# generate objects to save scores to
modelnames <- c("ens", "emos.q", "ecc.q", "ecc.s", "decc.q", "ssh", "gca","clayton","frank","gumbel")
crps_list <- es_list <- vs1_list <- vs1w_list <- vs0_list <- vs0w_list <- param_list <- indep_list <- list()
# Timing_list stores the time needed to do all relevant computations
timing_list <- list()
for(mm in 1:length(modelnames)){
es_list[[mm]] <- vs1_list[[mm]] <- vs1w_list[[mm]] <-
vs0_list[[mm]] <- vs0w_list[[mm]] <- param_list[[mm]] <- indep_list[[mm]] <- matrix(NA, nrow = 1, ncol = nout)
crps_list[[mm]] <- array(NA, dim = c(nout, d))
timing_list[[mm]] <- array(NA, dim = 1)
}
names(crps_list) <- names(es_list) <- names(vs1_list) <- names(vs1w_list) <-
names(vs0_list) <- names(vs0w_list) <- names(param_list) <- names(indep_list) <- names(timing_list) <- modelnames
# set random seed
set.seed(1)
# Create ensfc data structure
ensfc <- array(NA, dim = c(nout, m, d))
for (station in stations) {
index <- match(station,stations)
for (day in 1:length(days)) {
# Extract forecast for day and dim = index
try(
ensfc[day,,index] <- unlist(subset(data, td == days[day] & stat == station)[ensembleMembers], use.names = FALSE)
)
}
}
# .GlobalEnv$test <- ensfc
# postprocess ensemble forecasts
start_time <- Sys.time()
# emos_param[nn,dd,] <- c(loc, sc)
pp_out <- array(NA, dim = c(length(days), d, 2))
for (station in stations) {
# Uses 50 day time window
emos.result <- emos_T2M_mean_singleForecast(subset(data, stat == station))
for (row in length(emos.result$obs)) {
values <- unlist(unname(emos.result[row,][c("ens_mu", "ens_sd")]))
day <- match(emos.result[row,]$td, days)
pp_out[day,match(station,stations),] <- values
}
}
.GlobalEnv$test <- pp_out
end_time <- Sys.time()
timing_list$uvpp[rr] <- end_time - start_time
}
run_processing(data1, 3, TRUE, TRUE)
test
run_processing <- function(data, timeWindow, progress_ind = FALSE, compute_crps, ...){
# Stations and days from the data
stations <- unique(data$stat)
days <- sort(unique(data$td))
nout <- length(days)
# 1 weather variable over 1 lead time with d stations
d <- length(stations)
# Ensemble members
m <- sum(grepl("laef", names(data)))
ensembleMembers <- sapply(1:m, FUN = function(x) paste0("laef", x))
# generate objects to save scores to
modelnames <- c("ens", "emos.q", "ecc.q", "ecc.s", "decc.q", "ssh", "gca","clayton","frank","gumbel")
crps_list <- es_list <- vs1_list <- vs1w_list <- vs0_list <- vs0w_list <- param_list <- indep_list <- list()
# Timing_list stores the time needed to do all relevant computations
timing_list <- list()
for(mm in 1:length(modelnames)){
es_list[[mm]] <- vs1_list[[mm]] <- vs1w_list[[mm]] <-
vs0_list[[mm]] <- vs0w_list[[mm]] <- param_list[[mm]] <- indep_list[[mm]] <- matrix(NA, nrow = 1, ncol = nout)
crps_list[[mm]] <- array(NA, dim = c(nout, d))
timing_list[[mm]] <- array(NA, dim = 1)
}
names(crps_list) <- names(es_list) <- names(vs1_list) <- names(vs1w_list) <-
names(vs0_list) <- names(vs0w_list) <- names(param_list) <- names(indep_list) <- names(timing_list) <- modelnames
# set random seed
set.seed(1)
# Create ensfc data structure
ensfc <- array(NA, dim = c(nout, m, d))
for (station in stations) {
index <- match(station,stations)
for (day in 1:length(days)) {
# Extract forecast for day and dim = index
try(
ensfc[day,,index] <- unlist(subset(data, td == days[day] & stat == station)[ensembleMembers], use.names = FALSE)
)
}
}
# .GlobalEnv$test <- ensfc
# postprocess ensemble forecasts
start_time <- Sys.time()
# emos_param[nn,dd,] <- c(loc, sc)
pp_out <- array(NA, dim = c(length(days), d, 2))
for (station in stations) {
# Uses 50 day time window
emos.result <- emos_T2M_mean_singleForecast(subset(data, stat == station))
for (row in length(emos.result$obs)) {
values <- unlist(unname(emos.result[row,][c("ens_mu", "ens_sd")]))
day <- match(emos.result[row,]$td, days)
pp_out[day,match(station,stations),] <- values
print(values)
}
}
.GlobalEnv$test <- pp_out
end_time <- Sys.time()
timing_list$uvpp[rr] <- end_time - start_time
}
run_processing(data1, 3, TRUE, TRUE)
length(res$obs)
run_processing <- function(data, timeWindow, progress_ind = FALSE, compute_crps, ...){
# Stations and days from the data
stations <- unique(data$stat)
days <- sort(unique(data$td))
nout <- length(days)
# 1 weather variable over 1 lead time with d stations
d <- length(stations)
# Ensemble members
m <- sum(grepl("laef", names(data)))
ensembleMembers <- sapply(1:m, FUN = function(x) paste0("laef", x))
# generate objects to save scores to
modelnames <- c("ens", "emos.q", "ecc.q", "ecc.s", "decc.q", "ssh", "gca","clayton","frank","gumbel")
crps_list <- es_list <- vs1_list <- vs1w_list <- vs0_list <- vs0w_list <- param_list <- indep_list <- list()
# Timing_list stores the time needed to do all relevant computations
timing_list <- list()
for(mm in 1:length(modelnames)){
es_list[[mm]] <- vs1_list[[mm]] <- vs1w_list[[mm]] <-
vs0_list[[mm]] <- vs0w_list[[mm]] <- param_list[[mm]] <- indep_list[[mm]] <- matrix(NA, nrow = 1, ncol = nout)
crps_list[[mm]] <- array(NA, dim = c(nout, d))
timing_list[[mm]] <- array(NA, dim = 1)
}
names(crps_list) <- names(es_list) <- names(vs1_list) <- names(vs1w_list) <-
names(vs0_list) <- names(vs0w_list) <- names(param_list) <- names(indep_list) <- names(timing_list) <- modelnames
# set random seed
set.seed(1)
# Create ensfc data structure
ensfc <- array(NA, dim = c(nout, m, d))
for (station in stations) {
index <- match(station,stations)
for (day in 1:length(days)) {
# Extract forecast for day and dim = index
try(
ensfc[day,,index] <- unlist(subset(data, td == days[day] & stat == station)[ensembleMembers], use.names = FALSE)
)
}
}
# .GlobalEnv$test <- ensfc
# postprocess ensemble forecasts
start_time <- Sys.time()
# emos_param[nn,dd,] <- c(loc, sc)
pp_out <- array(NA, dim = c(length(days), d, 2))
for (station in stations) {
# Uses 50 day time window
emos.result <- emos_T2M_mean_singleForecast(subset(data, stat == station))
for (row in 1:length(emos.result$obs)) {
values <- unlist(unname(emos.result[row,][c("ens_mu", "ens_sd")]))
day <- match(emos.result[row,]$td, days)
pp_out[day,match(station,stations),] <- values
# print(values)
}
}
.GlobalEnv$test <- pp_out
end_time <- Sys.time()
}
run_processing(data1, 3, TRUE, TRUE)
test
run_processing <- function(data, timeWindow, progress_ind = FALSE, compute_crps, ...){
# Stations and days from the data
stations <- unique(data$stat)
days <- sort(unique(data$td))
nout <- length(days)
# 1 weather variable over 1 lead time with d stations
d <- length(stations)
# Ensemble members
m <- sum(grepl("laef", names(data)))
ensembleMembers <- sapply(1:m, FUN = function(x) paste0("laef", x))
# generate objects to save scores to
modelnames <- c("ens", "emos.q", "ecc.q", "ecc.s", "decc.q", "ssh", "gca","clayton","frank","gumbel")
crps_list <- es_list <- vs1_list <- vs1w_list <- vs0_list <- vs0w_list <- param_list <- indep_list <- list()
# Timing_list stores the time needed to do all relevant computations
timing_list <- list()
for(mm in 1:length(modelnames)){
es_list[[mm]] <- vs1_list[[mm]] <- vs1w_list[[mm]] <-
vs0_list[[mm]] <- vs0w_list[[mm]] <- param_list[[mm]] <- indep_list[[mm]] <- matrix(NA, nrow = 1, ncol = nout)
crps_list[[mm]] <- array(NA, dim = c(nout, d))
timing_list[[mm]] <- array(NA, dim = 1)
}
names(crps_list) <- names(es_list) <- names(vs1_list) <- names(vs1w_list) <-
names(vs0_list) <- names(vs0w_list) <- names(param_list) <- names(indep_list) <- names(timing_list) <- modelnames
# set random seed
set.seed(1)
# Create ensfc data structure
ensfc <- array(NA, dim = c(nout, m, d))
for (station in stations) {
index <- match(station,stations)
for (day in 1:length(days)) {
# Extract forecast for day and dim = index
try(
ensfc[day,,index] <- unlist(subset(data, td == days[day] & stat == station)[ensembleMembers], use.names = FALSE)
)
}
}
# .GlobalEnv$test <- ensfc
# postprocess ensemble forecasts
start_time <- Sys.time()
# emos_param[nn,dd,] <- c(loc, sc)
pp_out <- array(NA, dim = c(length(days), d, 2))
for (station in stations) {
# Uses 50 day time window
emos.result <- emos_T2M_mean_singleForecast(subset(data, stat == station))
for (row in 1:length(emos.result$obs)) {
values <- unlist(unname(emos.result[row,][c("ens_mu", "ens_sd")]))
day <- match(emos.result[row,]$td, days)
pp_out[day,match(station,stations),] <- values
# print(values)
}
}
.GlobalEnv$test <- pp_out
end_time <- Sys.time()
return(pp_out)
}
k <- run_processing(data1, 3, TRUE, TRUE)
k
k[!is.na(k)]
k[1,1,1] <- 4
k
k[,2,]
k[1,1,] <- c(1,2)
k
dim(k)
k[1,1,]
run_processing <- function(data, timeWindow, progress_ind = FALSE, compute_crps, ...){
# Stations and days from the data
stations <- unique(data$stat)
days <- sort(unique(data$td))
nout <- length(days)
# 1 weather variable over 1 lead time with d stations
d <- length(stations)
# Ensemble members
m <- sum(grepl("laef", names(data)))
ensembleMembers <- sapply(1:m, FUN = function(x) paste0("laef", x))
# generate objects to save scores to
modelnames <- c("ens", "emos.q", "ecc.q", "ecc.s", "decc.q", "ssh", "gca","clayton","frank","gumbel")
crps_list <- es_list <- vs1_list <- vs1w_list <- vs0_list <- vs0w_list <- param_list <- indep_list <- list()
# Timing_list stores the time needed to do all relevant computations
timing_list <- list()
for(mm in 1:length(modelnames)){
es_list[[mm]] <- vs1_list[[mm]] <- vs1w_list[[mm]] <-
vs0_list[[mm]] <- vs0w_list[[mm]] <- param_list[[mm]] <- indep_list[[mm]] <- matrix(NA, nrow = 1, ncol = nout)
crps_list[[mm]] <- array(NA, dim = c(nout, d))
timing_list[[mm]] <- array(NA, dim = 1)
}
names(crps_list) <- names(es_list) <- names(vs1_list) <- names(vs1w_list) <-
names(vs0_list) <- names(vs0w_list) <- names(param_list) <- names(indep_list) <- names(timing_list) <- modelnames
# set random seed
set.seed(1)
# Create ensfc data structure
ensfc <- array(NA, dim = c(nout, m, d))
for (station in stations) {
index <- match(station,stations)
for (day in 1:length(days)) {
# Extract forecast for day and dim = index
try(
ensfc[day,,index] <- unlist(subset(data, td == days[day] & stat == station)[ensembleMembers], use.names = FALSE)
)
}
}
# .GlobalEnv$test <- ensfc
# postprocess ensemble forecasts
start_time <- Sys.time()
# emos_param[nn,dd,] <- c(loc, sc)
pp_out <- array(NA, dim = c(length(days), d, 2))
for (station in stations) {
# Uses 50 day time window
emos.result <- emos_T2M_mean_singleForecast(subset(data, stat == station))
for (row in 1:length(emos.result$obs)) {
values <- unlist(unname(emos.result[row,][c("ens_mu", "ens_sd")]))
day <- match(emos.result[row,]$td, days)
pp_out[day,match(station,stations),] <- values
print(values)
# print(pp_out)
}
}
.GlobalEnv$test <- pp_out
end_time <- Sys.time()
return(pp_out)
}
k <- run_processing(data1, 3, TRUE, TRUE)
run_processing <- function(data, timeWindow, progress_ind = FALSE, compute_crps, ...){
# Stations and days from the data
stations <- unique(data$stat)
days <- sort(unique(data$td))
nout <- length(days)
# 1 weather variable over 1 lead time with d stations
d <- length(stations)
# Ensemble members
m <- sum(grepl("laef", names(data)))
ensembleMembers <- sapply(1:m, FUN = function(x) paste0("laef", x))
# generate objects to save scores to
modelnames <- c("ens", "emos.q", "ecc.q", "ecc.s", "decc.q", "ssh", "gca","clayton","frank","gumbel")
crps_list <- es_list <- vs1_list <- vs1w_list <- vs0_list <- vs0w_list <- param_list <- indep_list <- list()
# Timing_list stores the time needed to do all relevant computations
timing_list <- list()
for(mm in 1:length(modelnames)){
es_list[[mm]] <- vs1_list[[mm]] <- vs1w_list[[mm]] <-
vs0_list[[mm]] <- vs0w_list[[mm]] <- param_list[[mm]] <- indep_list[[mm]] <- matrix(NA, nrow = 1, ncol = nout)
crps_list[[mm]] <- array(NA, dim = c(nout, d))
timing_list[[mm]] <- array(NA, dim = 1)
}
names(crps_list) <- names(es_list) <- names(vs1_list) <- names(vs1w_list) <-
names(vs0_list) <- names(vs0w_list) <- names(param_list) <- names(indep_list) <- names(timing_list) <- modelnames
# set random seed
set.seed(1)
# Create ensfc data structure
ensfc <- array(NA, dim = c(nout, m, d))
for (station in stations) {
index <- match(station,stations)
for (day in 1:length(days)) {
# Extract forecast for day and dim = index
try(
ensfc[day,,index] <- unlist(subset(data, td == days[day] & stat == station)[ensembleMembers], use.names = FALSE)
)
}
}
# .GlobalEnv$test <- ensfc
# postprocess ensemble forecasts
start_time <- Sys.time()
# emos_param[nn,dd,] <- c(loc, sc)
pp_out <- array(NA, dim = c(length(days), d, 2))
for (station in stations) {
# Uses 50 day time window
emos.result <- emos_T2M_mean_singleForecast(subset(data, stat == station))
for (row in 1:length(emos.result$obs)) {
values <- unlist(unname(emos.result[row,][c("ens_mu", "ens_sd")]))
day <- match(emos.result[row,]$td, days)
print(pp_out[day,match(station,stations),])
pp_out[day,match(station,stations),] <- values
print(values)
# print(pp_out)
}
}
.GlobalEnv$test <- pp_out
end_time <- Sys.time()
return(pp_out)
}
k <- run_processing(data1, 3, TRUE, TRUE)
pp_out <- array(NA, dim = c(10, 3, 2))
pp_out[4,1,] <- c(5,2)
pp_out
match(2, c(1,2,3))
match(2, c(1,2,3))+4
match(2, c(1,2,3))[0]
match(2, c(1,2,3))[1]
2
run_processing <- function(data, timeWindow, progress_ind = FALSE, compute_crps, ...){
# Stations and days from the data
stations <- unique(data$stat)
days <- sort(unique(data$td))
nout <- length(days)
# 1 weather variable over 1 lead time with d stations
d <- length(stations)
# Ensemble members
m <- sum(grepl("laef", names(data)))
ensembleMembers <- sapply(1:m, FUN = function(x) paste0("laef", x))
# generate objects to save scores to
modelnames <- c("ens", "emos.q", "ecc.q", "ecc.s", "decc.q", "ssh", "gca","clayton","frank","gumbel")
crps_list <- es_list <- vs1_list <- vs1w_list <- vs0_list <- vs0w_list <- param_list <- indep_list <- list()
# Timing_list stores the time needed to do all relevant computations
timing_list <- list()
for(mm in 1:length(modelnames)){
es_list[[mm]] <- vs1_list[[mm]] <- vs1w_list[[mm]] <-
vs0_list[[mm]] <- vs0w_list[[mm]] <- param_list[[mm]] <- indep_list[[mm]] <- matrix(NA, nrow = 1, ncol = nout)
crps_list[[mm]] <- array(NA, dim = c(nout, d))
timing_list[[mm]] <- array(NA, dim = 1)
}
names(crps_list) <- names(es_list) <- names(vs1_list) <- names(vs1w_list) <-
names(vs0_list) <- names(vs0w_list) <- names(param_list) <- names(indep_list) <- names(timing_list) <- modelnames
# set random seed
set.seed(1)
# Create ensfc data structure
ensfc <- array(NA, dim = c(nout, m, d))
for (station in stations) {
index <- match(station,stations)
for (day in 1:length(days)) {
# Extract forecast for day and dim = index
try(
ensfc[day,,index] <- unlist(subset(data, td == days[day] & stat == station)[ensembleMembers], use.names = FALSE)
)
}
}
# .GlobalEnv$test <- ensfc
# postprocess ensemble forecasts
start_time <- Sys.time()
# emos_param[nn,dd,] <- c(loc, sc)
pp_out <- array(NA, dim = c(length(days), d, 2))
for (station in stations) {
# Uses 50 day time window
emos.result <- emos_T2M_mean_singleForecast(subset(data, stat == station))
for (row in 1:length(emos.result$obs)) {
values <- unlist(unname(emos.result[row,][c("ens_mu", "ens_sd")]))
day <- match(emos.result[row,]$td, days)
print("day")
print(day)
print("stat")
print(match(station,stations))
pp_out[day,match(station,stations),] <- values
print(values)
# print(pp_out)
}
}
.GlobalEnv$test <- pp_out
end_time <- Sys.time()
return(pp_out)
}
k <- run_processing(data1, 3, TRUE, TRUE)
res <- emos_T2M_mean_singleForecast(data1)
res <- emos_T2M_mean_singleForecast(subset(data, stat == 11343))
res <- emos_T2M_mean_singleForecast(subset(data1, stat == 11343))
View(res)
res <- emos_T2M_mean_singleForecast(subset(data1, stat == 11343))
View(res)
source("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code/ECC_T2M_Emos_subfunctions.R")
res <- emos_T2M_mean_singleForecast(subset(data1, stat == 11343))
View(res)
run_processing <- function(data, timeWindow, progress_ind = FALSE, compute_crps, ...){
# Stations and days from the data
stations <- unique(data$stat)
days <- sort(unique(data$td))
nout <- length(days)
# 1 weather variable over 1 lead time with d stations
d <- length(stations)
# Ensemble members
m <- sum(grepl("laef", names(data)))
ensembleMembers <- sapply(1:m, FUN = function(x) paste0("laef", x))
# generate objects to save scores to
modelnames <- c("ens", "emos.q", "ecc.q", "ecc.s", "decc.q", "ssh", "gca","clayton","frank","gumbel")
crps_list <- es_list <- vs1_list <- vs1w_list <- vs0_list <- vs0w_list <- param_list <- indep_list <- list()
# Timing_list stores the time needed to do all relevant computations
timing_list <- list()
for(mm in 1:length(modelnames)){
es_list[[mm]] <- vs1_list[[mm]] <- vs1w_list[[mm]] <-
vs0_list[[mm]] <- vs0w_list[[mm]] <- param_list[[mm]] <- indep_list[[mm]] <- matrix(NA, nrow = 1, ncol = nout)
crps_list[[mm]] <- array(NA, dim = c(nout, d))
timing_list[[mm]] <- array(NA, dim = 1)
}
names(crps_list) <- names(es_list) <- names(vs1_list) <- names(vs1w_list) <-
names(vs0_list) <- names(vs0w_list) <- names(param_list) <- names(indep_list) <- names(timing_list) <- modelnames
# set random seed
set.seed(1)
# Create ensfc data structure
ensfc <- array(NA, dim = c(nout, m, d))
for (station in stations) {
index <- match(station,stations)
for (day in 1:length(days)) {
# Extract forecast for day and dim = index
try(
ensfc[day,,index] <- unlist(subset(data, td == days[day] & stat == station)[ensembleMembers], use.names = FALSE)
)
}
}
# .GlobalEnv$test <- ensfc
# postprocess ensemble forecasts
start_time <- Sys.time()
# emos_param[nn,dd,] <- c(loc, sc)
pp_out <- array(NA, dim = c(length(days), d, 2))
for (station in stations) {
# Uses 50 day time window
emos.result <- emos_T2M_mean_singleForecast(subset(data, stat == station))
for (row in 1:length(emos.result$obs)) {
values <- unlist(unname(emos.result[row,][c("ens_mu", "ens_sd")]))
day <- match(emos.result[row,]$td, days)
print("day")
print(day)
print("stat")
print(match(station,stations))
pp_out[day,match(station,stations),] <- values
print(values)
# print(pp_out)
}
}
.GlobalEnv$test <- pp_out
end_time <- Sys.time()
return(pp_out)
}
k <- run_processing(data1, 3, TRUE, TRUE)
k
test
View(data1)
View(data1)
variable
setwd("C:/Users/20192042/OneDrive - TU Eindhoven/Courses/BEP - BAM/Code/multiv_pp-master/simulation code")
fName <- "INPUT-DATA_temp_2013071000-2016033000"
load(paste0("../../Data/", fName, ".Rdata")) # loads data in "input" variable
View(input)
input[["leadtime15"]]
View(input[["leadtime14"]])
View(input[["leadtime11"]])
View(data1_comp)
