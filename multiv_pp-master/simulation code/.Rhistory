load("C:/Users/mgjfl/OneDrive - TU Eindhoven/University/Courses/Bachelor BAM-BAP/BEP - BAM/Code/Data/INPUT-DATA_temp_2013071000-2016033000.Rdata")
View(input)
load("C:/Users/mgjfl/OneDrive - TU Eindhoven/University/Courses/Bachelor BAM-BAP/BEP - BAM/Code/multiv_pp-master/simulation code/.Rhistory")
load("~/.Rhistory")
help(pnorm)
rm(list=ls())
library(ggplot2)
library(ggpubr)
library(purrr)
library(qqplotr)
library("here")
setwd(paste0(here("multiv_pp-master"), "/simulation code"))
setwd("C:/Users/mgjfl/OneDrive - TU Eindhoven/University/Courses/Bachelor BAM-BAP/BEP - BAM/Code/multiv_pp-master/simulation code")
# "source" files for functions
dir <- "./sourceArchimedean/"
source(paste0(dir, "postprocess_ensfc_arch.R"))
source(paste0(dir, "mvpp_arch.R"))
source(paste0(dir, "evaluation_functions_arch.R"))
source(paste0(dir, "CopulaParameter.R"))
source(paste0(dir, "mvpp_data_copula_study.R"))
source("ECC_T2M_Emos_subfunctions.R")
View(crps_wrapper)
library(scoringRules)
View(seasonal_copula)
es_sample()
help(es_sample)
es_sample(c(1, 2, 3), c(2, 3, 4))
es_sample(c(1, 2, 3), c(c(2, 3, 4)))
y_true <- c(1, 2, 3)  # Example true values
y_pred <- c(2, 3, 4)  # Example predicted values
es <- energy_score(y_true, y_pred)
energy_score <- function(y_true, y_pred) {
# Calculate Energy Score using es_sample function
es <- es_sample(y_true, matrix(y_pred, ncol = length(y_pred)))
return(es)
}
es <- energy_score(y_true, y_pred)
energy_score <- function(y_true, y_pred) {
# Ensure y_pred has the same number of columns as y_true
y_pred <- matrix(y_pred, ncol = length(y_true))
# Calculate Energy Score using es_sample function
es <- es_sample(y_true, y_pred)
return(es)
}
es <- energy_score(y_true, y_pred)
d <- 10  # number of dimensions
m <- 50  # number of samples from multivariate forecast distribution
# parameters for multivariate normal example
mu0 <- rep(0, d)
mu <- rep(1, d)
S0 <- S <- diag(d)
S0[S0==0] <- 0.2
S[S==0] <- 0.1
# generate samples from multivariate normal distributions
obs <- drop(mu0 + rnorm(d) %*% chol(S0))
fc_sample <- replicate(m, drop(mu + rnorm(d) %*% chol(S)))
# compute Energy Score
es_sample(y = obs, dat = fc_sample)
test <- c(c(1,2, 3))
test <- c(c(1,2, 3), c(1, 2, 3))
test <- matrix(c(1,2, 3), ncol=3, nrow = 1)
y_true <- c(1, 2, 3)
y_pred <- matrix(c(2, 3, 4), ncol=1, nrow = 3)
es_sample(y_true, y_pred)
es_sample
esC_xy
help(t)
help(esC_xy)
??esC_xy
y_true <- c(1, 2, 3)
y_pred <- matrix(c(2, 3, 4), ncol=1, nrow = 3)
es_sample(y_true, y_pred)
y_pred <- matrix(c(2, 3, 4, 3, 6, 9), ncol=2, nrow = 3)
es_sample(y_true, y_pred)
View(y_pred)
source("~/.active-rstudio-document")
y_true <- c(1, 2, 3, 8)
y_pred <- matrix(c(2, 3, 4, 5, 3, 6, 9, -11), ncol=2, nrow = 4)
es_sample(y_true, y_pred)
vs_sample
vs_sample(y_true, y_pred)
vs_sample(y_true, y_pred, p = 1)
es_sample(y_true, y_pred, p = 1)
y_true <- c(1, 2, 3, 8)
y_pred <- matrix(c(2, 3, 4, 5, 3, 6, 9, -11), ncol=2, nrow = 4)
es_sample(y_true, y_pred, p = 1)
es_sample(y_true, y_pred)
y_true <- c(1, 2, 3, 8)
y_pred <- matrix(c(2, 3, 4, 5, 3, 6, 9, -11), ncol=2, nrow = 4)
vs_sample(y_true, y_pred)
help(dm.test)
help(dm)
library(forecast) # for DM test function
help(dm)
help(dm.test)
dm.test
help(acf)
e1 <- c(1, 2, 3)
e2 <- c(10, 0, 4)
d <- c(abs(e1))^power - c(abs(e2))^power
power <- 1
e1 <- c(1, 2, 3)
e2 <- c(10, 0, 4)
d <- c(abs(e1))^power - c(abs(e2))^power
d
d.cov <- acf(d, na.action = na.omit, lag.max = h - 1, type = "covariance",
plot = FALSE)$acf[, , 1]
h <- 1
e1 <- c(1, 2, 3)
e2 <- c(10, 0, 4)
d <- c(abs(e1))^power - c(abs(e2))^power
d.cov <- acf(d, na.action = na.omit, lag.max = h - 1, type = "covariance",
plot = FALSE)$acf[, , 1]
acf(d, na.action = na.omit, lag.max = h - 1, type = "covariance",
plot = FALSE)
help(dm.test)
n <- length(d)
if (varestimator == "acf" | h == 1L) {
d.var <- sum(c(d.cov[1], 2 * d.cov[-1]))/n
}
else {
varestimator <- "acf"
e1 <- c(1, 2, 3)
e2 <- c(10, 0, 4)
d <- c(abs(e1))^power - c(abs(e2))^power
d.cov <- acf(d, na.action = na.omit, lag.max = h - 1, type = "covariance",
plot = FALSE)$acf[, , 1]
n <- length(d)
if (varestimator == "acf" | h == 1L) {
d.var <- sum(c(d.cov[1], 2 * d.cov[-1]))/n
}
3 * d.cov
3 * d.cov / 4
n
c(d.cov[1], 2 * d.cov[-1])
d.cov[1]
d.cov[-1]
d.var <- sum(c(d.cov[1], 2 * d.cov[-1]))/n
if (varestimator == "acf" | h == 1L) {
d.var <- sum(c(d.cov[1], 2 * d.cov[-1]))/n
}
else {
dv <- d.var
if (dv > 0) {
STATISTIC <- mean(d, na.rm = TRUE)/sqrt(dv)
}
else if (h == 1) {
else {
k <- ((n + 1 - 2 * h + (h/n) * (h - 1))/n)^(1/2)
help(pt)
k <- ((n + 1 - 2 * h + (h/n) * (h - 1))/n)^(1/2)
STATISTIC <- STATISTIC * k
names(STATISTIC) <- "DM"
if (alternative == "two.sided") {
PVAL <- 2 * pt(-abs(STATISTIC), df = n - 1)
}
else if (alternative == "less") {
2 * pt(-abs(STATISTIC), df = n - 1)
load("C:/Users/mgjfl/OneDrive - TU Eindhoven/University/Courses/Bachelor BAM-BAP/BEP - BAM/Code/multiv_pp-master/Data/TestStatistic/TestStatistic_data_group1.Rdata")
View(dfmc)
help("gumbelCopula")
help("fitCopula")
