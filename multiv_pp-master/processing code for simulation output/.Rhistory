load("C:/Users/mgjfl/OneDrive - TU Eindhoven/University/Courses/Bachelor BAM-BAP/BEP - BAM/Code/Data/INPUT-DATA_temp_2013071000-2016033000.Rdata")
View(input)
load("C:/Users/mgjfl/OneDrive - TU Eindhoven/University/Courses/Bachelor BAM-BAP/BEP - BAM/Code/multiv_pp-master/simulation code/.Rhistory")
load("~/.Rhistory")
help(pnorm)
help(pnorm)
help(mvdc)
library(copula)
help(mvdc)
rMvdc
setwd("C:/Users/mgjfl/OneDrive - TU Eindhoven/University/Courses/Bachelor BAM-BAP/BEP - BAM/Code/multiv_pp-master/processing code for simulation output")
library("here")
groupNR <- 1
benchmark <- "ssh"
fName <- paste0("Res_group_", groupNR)
load(paste0("../Data/Rdata_LAEF/", fName, ".Rdata")) # loads data in "res" variable
View(res)
View(res)
load("C:/Users/mgjfl/OneDrive - TU Eindhoven/University/Courses/Bachelor BAM-BAP/BEP - BAM/Code/multiv_pp-master/Data/Rdata_LAEF/Res_group_1.Rdata")
View(res)
View(res)
View(res)
View(res)
res[["es_list"]][["Clayton"]]
mean(res[["es_list"]][["Clayton"]])
std(res[["es_list"]][["Clayton"]])
var(res[["es_list"]][["Clayton"]])
res[["es_list"]][["Clayton"]]
type(res[["es_list"]][["Clayton"]])
res[["es_list"]][["Clayton"]][1,]
std(res[["es_list"]][["Clayton"]][1,])
var(res[["es_list"]][["Clayton"]][1,])
library(forecast) # for DM test function
this_score <- "es_list"
this_model <- "clayton"
dm.test(e1 = res[[which(input_scores == this_score)]][[which(input_models == this_model)]][,,1][MC_rep,],
e2 = res[[which(input_scores == this_score)]][[which(input_models == "ecc.q")]][,,1][MC_rep,],
h = 1, power = 1), silent = TRUE)
res[[which(input_scores == this_score)]][[which(input_models == this_model)]][,,1][MC_rep,]
dm.test(e1 = res[[this_score]][[this_model]][,,1][MC_rep,],
e2 = res[[this_score]][["ecc.q"]][,,1][MC_rep,],
h = 1, power = 1), silent = TRUE)
dm.test(e1 = res[[this_score]][[this_model]][1,],
e2 = res[[this_score]][["ecc.q"]][1,],
h = 1, power = 1), silent = TRUE)
res[[this_score]][["ecc.q"]][1,]
res[[this_score]][["ecc.q"]]
dm.test(e1 = res[[this_score]][[this_model]][1,],
e2 = res[[this_score]][["ecc.q"]],
h = 1, power = 1), silent = TRUE)
dm.test(e1 = res[[this_score]][[this_model]],
e2 = res[[this_score]][["ecc.q"]],
h = 1, power = 1), silent = TRUE)
res[[this_score]][[this_model]]
res[[this_score]][[this_model]]
res[["es_list"]][["Clayton"]]
this_model <- "Clayton"
dm.test(e1 = res[[this_score]][[this_model]],
e2 = res[[this_score]][["ecc.q"]],
h = 1, power = 1), silent = TRUE)
res[[this_score]][[this_model]]
dm.test(e1 = res[[this_score]][[this_model]][1,],
e2 = res[[this_score]][["ecc.q"]][1,],
h = 1, power = 1), silent = TRUE)
res[[this_score]][[this_model]][1,]
res[[this_score]][["ecc.q"]][1,]
res[[this_score]][["ecc.q"]]
dm.test(e1 = res[[this_score]][[this_model]][1,],
e2 = res[[this_score]][["ecc.q"]],
h = 1, power = 1), silent = TRUE)
dm.test(e1 = res[[this_score]][[this_model]][1,],
e2 = res[[this_score]][["ecc.q"]],
h = 1, power = 1)
dm.test
help(dm.test)
alternative <- "two.sided"
varestimator <- "acf"
h <- as.integer(h)
varestimator <- "acf"
h <- 1
power <- 1
if (h < 1L) {
stop("h must be at least 1")
}
if (h > length(e1)) {
stop("h cannot be longer than the number of forecast errors")
}
d <- c(abs(e1))^power - c(abs(e2))^power
e1 <- res[[this_score]][[this_model]][1,],
e1 <- res[[this_score]][[this_model]][1,]
e2 <- res[[this_score]][["ecc.q"]]
alternative <- "two.sided"
varestimator <- "acf"
h <- 1
power <- 1
if (h < 1L) {
stop("h must be at least 1")
}
if (h > length(e1)) {
stop("h cannot be longer than the number of forecast errors")
}
d <- c(abs(e1))^power - c(abs(e2))^power
mean(d)
mean(e1)
var(e1)
mean(e2)
var(e2)
mean(c(abs(e1))^power)
d.cov <- acf(d, na.action = na.omit, lag.max = h - 1, type = "covariance",
plot = FALSE)$acf[, , 1]
d.cov
n <- length(d)
if (varestimator == "acf" | h == 1L) {
d.var <- sum(c(d.cov[1], 2 * d.cov[-1]))/n
}
else {
dv <- d.var
dv
if (dv > 0) {
STATISTIC <- mean(d, na.rm = TRUE)/sqrt(dv)
}
else if (h == 1) {
else {
k <- ((n + 1 - 2 * h + (h/n) * (h - 1))/n)^(1/2)
STATISTIC <- STATISTIC * k
names(STATISTIC) <- "DM"
if (alternative == "two.sided") {
PVAL <- 2 * pt(-abs(STATISTIC), df = n - 1)
}
else if (alternative == "less") {
else if (alternative == "greater") {
PARAMETER <- c(h, power)
names(PARAMETER) <- c("Forecast horizon", "Loss function power")
structure(list(statistic = STATISTIC, parameter = PARAMETER,
alternative = alternative, varestimator = varestimator,
p.value = PVAL, method = "Diebold-Mariano Test", data.name = c(deparse(substitute(e1)),
deparse(substitute(e2)))), class = "htest")
